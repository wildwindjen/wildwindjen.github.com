<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wild Wind]]></title>
  <link href="http://wildwindjen.github.io/atom.xml" rel="self"/>
  <link href="http://wildwindjen.github.io/"/>
  <updated>2013-05-01T22:16:42+08:00</updated>
  <id>http://wildwindjen.github.io/</id>
  <author>
    <name><![CDATA[Wildwind Jen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[物件導向]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/30/object-oriented/"/>
    <updated>2013-04-30T14:36:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/30/object-oriented</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
「只重其義，不重其招，你忘記所有招式，就練成了！ 」「你記住了沒？」 --  張三豐。
</pre>


<p>這篇是因為我必須要在部門裡面作教育訓練，對於物件導向要怎麼上手，整理出來的心得。重點不在於教物件導向是什麼，而是分享經驗，讓想學物件導向的人，知道如何少繞一點路，減輕一點混亂。</p>

<h2>必須先知道的事</h2>

<ul>
<li>物件導向，主角是觀念，是思維。專案開發過程都使用物件導向的思維去分析、設計、實作時，這就是導入物件導向。否則，就算使用了 Java、 Dot Net 世界上任何一種支援物件導向能力的語言，都不代表這個專案使用物件導向開發。</li>
<li>需求、需求、需求。你的需求才是決定你採用什麼方式開發專案的唯一因素。</li>
<li>除了繼承、封裝、多型這些物件導向的特性，應該更加注意<code>需求-&gt;各角色職責分工</code>。</li>
</ul>


<h2>跳躍門檻</h2>

<p>從開始接觸物件導向到現在，覺得最大的門檻在於如何簡單說明類別與物件，在於多型如何一言以蔽之。一旦這兩個容易讓人混亂的概念容易被釐清，後面的路就好走多了(一路好走)。</p>

<p>所以，要先懂得區分「抽象的概念」與「具體的成品」。</p>

<p>拿安全帽來舉例，「法律規定，騎車要戴安全帽」和「你戴這一頂安全帽出門」，這兩個句子裡安全帽，意義上是不太一樣的。「法律規定，騎車要戴安全帽」的安全帽是一種統稱，泛指安全帽這<code>種類</code>的帽子，所以是一種抽象的概念。而「你戴這一頂安全帽出門」的安全帽，則是明確的指出一個實體，是一個具體的成品。</p>

<p>如果你區分得出來我說的這兩種安全帽邏輯上的不同，我們就安心地進入物件導向的世界吧。</p>

<h2>Java 裡的抽象和具體</h2>

<p>在 Java 裡，我們使用類別(Class)或者介面(Interface)來定義抽象的概念，而依照類別產生出來的具體成品我們叫物件(Object)，依照介面打造而成的具體成品我們稱為實作(Implementation)。</p>

<h2>類別(Class)</h2>

<p>物件導向觀念裡的類別，簡單地說，就是分類出來的類型。就像是生物學裡的<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%88%86%E9%A1%9E%E6%B3%95" title="生物分類法">生物分類法</a>。屬於同一類型的東西，都有相同的特徵，相同的基礎能力。</p>

<p>如果要說這個類別跟生物學的種類差異點在哪裡的話，生物學的種類是將已存在的東西做分類，而程式的類別則是你先定義出這個類別的特徵與標準，然後再製作出來。這個就像是工廠製造，先刻一個模子出來，然後再去生產成品。<img class="center" src="http://wildwindjen.github.io/images/wildwind/object_oriented/class.jpg" width="600" height="350" title="class and objects" alt="class and objects"></p>

<p>所以，是的，你得先知道你想要的特徵跟分類定義，才能打造這個模子，你才能寫出這個類別。這代表，你得先圈畫出你想要解決的問題領域，然後從這個領域範圍裡蒐集所有的相關需求，最後從需求裡面作職責分工、分類。</p>

<p>程式的類別同時滿足了現實世界中人為分類跟生物分類的特性。人為分類滿足的就是先設計，再批次製造。生物分類重要的特性是演化，也就是程式中提到的繼承。</p>

<h2>繼承(Inheritance)</h2>

<p>物件導向觀念裡的類別跟真實世界的物種一樣，有遺傳的概念。在物件導向世界裡叫做繼承。不過跟這篇<a href="http://milikao.pixnet.net/blog/post/543716-%E7%B9%BC%E6%89%BF%E6%98%AF%E7%88%B6%E5%AD%90%E9%97%9C%E4%BF%82%EF%BC%9F%E6%89%8D%E6%80%AA%EF%BC%81-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%88%9D%E5%AD%B8%E8%80%85%E6%87%89" title="繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)">繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)</a>作者一樣，我覺得遺傳的這個詞比較好。因為繼承是人為的，可以放棄繼承。但遺傳是天生的，後來衍生的種類是沒辦法放棄的。而物件導向的繼承你是不能放棄繼承的，一旦基礎類別(Base Class)有這個特徵，衍生類別(Derived Class )就必須有。這種特性比較像是遺傳。</p>

<p>但是在這裡我們還是隨波逐流，使用繼承一詞。</p>

<p>繼承是類別跟類別間的關係。衍生類別繼承了基礎類別，會有相同的特徵(feature)。接著子類別可以以這個為基礎，繼續擴充、發展自己的獨特特徵。衍生類別雖然不能放棄繼承，但是可以改造這個特徵。程式的世界叫做覆寫( Override)。舉例來說，你遺傳(extends)了你爸爸的單眼皮，你可以請專業醫美改造(override)成雙眼皮，但是你還是有眼皮(特徵)。又或者，人類遺傳了靈長類的特徵，但是又發展出「直立行走」、「語言」等特徵。</p>

<p>在物件導向的世界裡，透過繼承，是實現重用性(reusability)的方式之一。讓已存在的功能或流程得以被重複使用，而不用重複開發。</p>

<h2>物件(Object)</h2>

<p>物件依照類別創造出來的具體東西。ex: 這一頂安全帽。</p>

<h2>類別與物件</h2>

<p>物件有獨特性，而類別有共通性。共同的特徵集中在類別定義上，而物件可以針對各自的狀況加以客製化。所以常常有人拿設計圖與實際的產品來比喻類別和物件間的關係。只要類別變更，創造出來的物件就也會跟著變。</p>

<h2>請問這些東西怎麼用？</h2>

<p><img class="center" src="http://wildwindjen.github.io/images/wildwind/object_oriented/usb.jpg" width="600" height="350" title="How use these devices" alt="How use these devices">
為什麼你知道這是 USB 隨身碟？因為你辨識得出來這些東西共同的地方，是 USB 共用的界面 &#8211; 統一的規格。</p>

<h2>介面(Interface)</h2>

<p>用來規範程式必須滿足的功能或者界面。簡單地說，就是用來定義規格的玩意兒。ex: USB 的開發規格書。透過規格的定義，可以不用理會實作的細節，用的人只知道產品有支援某規格，就可以依照該規格定義的方法使用
這個產品。</p>

<h2>封裝(Encapsulation)</h2>

<p>使用的人不用管這個東西如何製造(Process)、實作，只要知道怎麼用它(Input)，用了它會有什麼結果就好(Output)。我們只要知道將 USB 插上電腦就能讓我們存取 USB 裡的資料就好，至於各家的 USB 電路怎麼設計，我們不用知道。這樣隨身碟廠商想要更換內部電路設計(改變實作方式)，不用通知我們。我們之間沒有藕斷絲連，這就是所謂的降低耦合度(decoupling)。</p>

<p>所以看得出來，介面主打的特性之一就是封裝。類別透過 private 屬性搭配 public getter/setter method，也能達到封裝的效果。</p>

<h2>實作(implementation)</h2>

<p>宣告遵守某個規格，並且開發/實作出(implements)該規格規範的功能。ex: 每一個實際的 USB 。都是 USB 規格的實作(成品)。</p>

<h2>多型(polymorphism)</h2>

<p>什麼叫多型？正所謂「多型不易，必自斃。」(哇咧供啥貨)。</p>

<p>這就是我下的定義：<code>以抽象之名，行具體之實。</code>一碼勝千言，這邊來看點程式碼，會更清楚。</p>

<figure class='code'><figcaption><span>People.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;吼～～&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Male.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Male</span> <span class="kd">extends</span> <span class="n">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;凍咧！&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Female.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Female</span> <span class="kd">extends</span> <span class="n">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;嗯～&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>PeoplePolyDemo.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">PeoplePolyDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeople</span><span class="o">(</span><span class="n">People</span> <span class="n">people</span><span class="o">){</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shoutTogether</span><span class="o">(){</span>
</span><span class='line'>            <span class="n">Iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
</span><span class='line'>                <span class="n">People</span> <span class="n">people</span> <span class="o">=</span> <span class="o">(</span><span class="n">People</span><span class="o">)</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                <span class="n">people</span><span class="o">.</span><span class="na">shout</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PeoplePolyDemo</span> <span class="n">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PeoplePolyDemo</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">addPeople</span><span class="o">(</span><span class="k">new</span> <span class="n">Male</span><span class="o">());</span>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">addPeople</span><span class="o">(</span><span class="k">new</span> <span class="n">Femail</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">shoutTogether</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你會看到 shoutTogether 雖然是使用 People 類別執行 shout 動作。可是卻是叫出該性別真正的叫聲。只要你是人，我就可以請你叫，如果你是男人你就會叫出男人的聲音，如果你是女人，就會用女人的叫法。這就是我說的<code>以抽象之名，行具體之實</code>。身為使用者，只要管你是不是特定能力的基礎類別，至於物件怎麼執行，就看物件實際的狀況。這邊的抽象不只限於類別，也包含介面。</p>

<h2>Why 物件導向</h2>

<ul>
<li>物件導向模擬了真實世界的特性，因為跟真實世界雷同，角色、職責分工，讓你容易理解、記憶。</li>
<li>透過物種演化、合成，可以實現既有程式碼的重用性(reusability)。</li>
<li>實踐封裝，讓各元件、角色彼此的合作，不再牽一髮而動全身。</li>
<li>&#8230;</li>
</ul>


<p>好吧，這樣太八股了，想要看上面這些優點，請自己去翻書吧。</p>

<p>為什麼要用物件導向？這個問題要問你自己，要看你的需求，你想要物件導向的特性解決你專案常發的甚麼問題？這就是你的需求。經驗告訴我，物件導向的特質會提高創建成本，還有人員教育門檻比較高，但是會降低專案長期維護成本。所以如果專案很小且急，而且不需要維護，我應該不會考慮使用物件導向。</p>

<p>各取所需。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Hibernate]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/29/first-hibernate/"/>
    <updated>2013-04-29T17:43:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/29/first-hibernate</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
此篇低原創性，非喜誤入。
</pre>


<p>因為某些原因，需要研究 Hibernate。所以參考 <a href="http://openhome.cc/Gossip/HibernateGossip/FirstHibernate.html" title="Hibernate Gossip: 第一個 Hibernate">Hibernate Gossip: 第一個 Hibernate</a>，做些實驗跟記錄。應該會記好長~好長的一陣子吧&#8230;</p>

<h2>下載 Hibernate 3.6.10</h2>

<ul>
<li>解壓縮</li>
<li>copy 出 hibernate3.jar</li>
<li>copy 出 lib/required/*.jar</li>
<li>copy 出 lib/jpa/*.jar ，話說這個是必要的，為什麼不是放在 required 裡啊？沒加進來出現下面的錯：</li>
</ul>


<pre>
java.lang.NoClassDefFoundError: javax/persistence/EntityListeners
</pre>


<h2>建立表格</h2>

<ul>
<li>注意 id 要 auto_increment，不然晚點會報無法寫入的錯： <code>Field 'id' doesn't have a default value</code></li>
</ul>


<pre>
    Exception in thread "main" org.hibernate.exception.GenericJDBCException: could not insert: [hbm.User]
        at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:140)
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:128)
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)
        at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:63)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2346)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2853)
        at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:71)
        at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:273)
        at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:320)
        at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:203)
        at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:129)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:210)
        at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:56)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:195)
        at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:50)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93)
        at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:713)
        at org.hibernate.impl.SessionImpl.save(SessionImpl.java:701)
        at org.hibernate.impl.SessionImpl.save(SessionImpl.java:697)
        at hbm.HibernateDemo.main(HibernateDemo.java:17)
    Caused by: java.sql.SQLException: Field 'id' doesn't have a default value
        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073)
        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3609)
        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3541)
        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2002)
        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2163)
        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2624)
        at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2127)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2427)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2345)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2330)
        at org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate.executeAndExtract(IdentityGenerator.java:93)
        at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:56)
        ... 16 more
</pre>


<h2>開發</h2>

<ul>
<li>新增 Java Project</li>
<li>把剛剛 copy 出了 jar 加進 Build Path</li>
<li>新增的兩個 xml 在 src/ 下。不然會報找不到這個錯： <code>/hibernate.cfg.xml not found</code></li>
</ul>


<pre>
    Exception in thread "main" java.lang.ExceptionInInitializerError
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:13)
        at hbm.HibernateDemo.main(HibernateDemo.java:13)
    Caused by: org.hibernate.HibernateException: /hibernate.cfg.xml not found
        at org.hibernate.util.ConfigHelper.getResourceAsStream(ConfigHelper.java:170)
        at org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2176)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2157)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2137)
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:10)
        ... 1 more
</pre>


<p>或者 <code>User.hbm.xml not found</code></p>

<pre>
    Exception in thread "main" java.lang.ExceptionInInitializerError
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:13)
        at hbm.HibernateDemo.main(HibernateDemo.java:13)
    Caused by: org.hibernate.MappingNotFoundException: resource: User.hbm.xml not found
        at org.hibernate.cfg.Configuration.addResource(Configuration.java:799)
        at org.hibernate.cfg.Configuration.parseMappingElement(Configuration.java:2344)
        at org.hibernate.cfg.Configuration.parseSessionFactory(Configuration.java:2310)
        at org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2290)
        at org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2243)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2158)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2137)
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:10)
        ... 1 more
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress by Self]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/28/customize-octopress-by-self/"/>
    <updated>2013-04-28T11:06:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/28/customize-octopress-by-self</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
士為悅己者死。
</pre>


<p>有些東西不是單純靠 config 就能弄出來的。偏偏自己又想要有這些東西。所以搞死自己也是算活該吧。</p>

<h2>留言討論 - 綁 Google 的留言</h2>

<p>因為我跟 Disqus 沒那麼熟。雖然 Google Plus 好像也沒熟去哪裡，可是我至少有帳號。一開始我是參考這一篇的: <a href="http://blog.justin.kelly.org.au/google-plus-octopress/" title="Google Plus Comments Link for Octopress">Google Plus Comments Link for Octopress</a>。但這個作法只是出現連結，而且每篇產生後還得自己 +1。所以最後我沒採用。以下是我的經驗整理：</p>

<ul>
<li>首先要設定 _config.xml 裡的 googleplus_user，這裡面的是 google plus id，純數字。這一關我有被騙到，一開始自以為聰明直接打 Google 帳號。不知道怎麼找自己 id 的人可以看 <a href="http://ansonalex.com/google-plus/how-do-i-find-my-google-plus-user-id-google/" title="How Do I Find My Google Plus User ID?">How Do I Find My Google Plus User ID?</a> 。</li>
<li>因為會用到 Google API Key，所以先去 <a href="https://code.google.com/apis/console/" title="API Console - Google Code">API Console - Google Code</a>。然後參考 <a href="http://www.designchemical.com/blog/index.php/faq/create-your-own-google-api-key/" title="Create Your Own Google API Key">Create Your Own Google API Key</a> ，開啟你的 Google+ API 服務，讓他變成 ON 的狀態。</li>
<li>切到 API Access，創建新的 Key(Create New Browser Key)，記住新的 key 值。</li>
<li>接著就照著 <a href="http://blog.justin.kelly.org.au/google-plus-octopress/" title="Google Plus Comments Link for Octopress">Google Plus Comments Link for Octopress</a> 說的，修改 <code>source/_includes/custom/after_footer.html</code> 和 <code>source/_includes/custom/head.html</code> 兩個檔案。其中的 <code>{YOUR_GOOGLE_API_KEY}</code> 記得換成剛剛的 Google API Key。</li>
<li>然後有個規則要特別注意的是，每發一篇新的文章，要自己先 +1 一下，而且得設定成<em>公開</em>，不然不會出現 comments 區塊。我被這一關卡超久的，因為我預設都是限定開放。後來發現 API 回傳的資料都是空，可是登入 Google Plus 又查得到，稍微發揮了點推理能力才解決。</li>
<li>使用 preview 是看不到結果的，得 deploy 才行。除非&#8230;，跟我一樣，把 <code>after_footer.html</code> 做點修改：</li>
</ul>


<pre>
//$post_link = encodeURI(jQuery(location).attr('href'));
$post_link = window.location.pathname;
</pre>


<h2>留言討論 - 綁 Google 的留言(終極版)</h2>

<p>是的，這是最終我採取的做法。留言直接在下方出現，不用點連結，也不用每篇寫完後要自己先 +1。這個做法是踹上面那個解法過程中，發現的可能做法，然後自己在 octopress 上試出來的。請先看一下 <a href="http://dashburst.com/how-to-add-google-comments-to-any-webpage-or-blog-unofficially/" title="How to Add Google+ Comments to Any Webpage or Blog">How to Add Google+ Comments to Any Webpage or Blog</a>。以下是我自己的做法：</p>

<ul>
<li>一樣要設定 _config.xml 裡的 googleplus_user 。</li>
<li>修改 <code>source/_layouts/post.html</code> ，在 Disqus 後面補上一段程式碼：</li>
</ul>


<figure class='code'><figcaption><span>google plus comments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.disqus_short_name and page.comments == true %}
</span><span class='line'>    &lt;section>
</span><span class='line'>      &lt;h1>Comments&lt;/h1>
</span><span class='line'>      &lt;div id="disqus_thread" aria-live="polite">{% include post/disqus_thread.html %}&lt;/div>
</span><span class='line'>    &lt;/section>
</span><span class='line'>  {% endif %}
</span><span class='line'>
</span><span class='line'>  &lt;!-- Google Comments, by wildwindjen -->
</span><span class='line'>  {% if site.googleplus_comments == true %}
</span><span class='line'>    &lt;section>
</span><span class='line'>      &lt;script src="https://apis.google.com/js/plusone.js">
</span><span class='line'>      &lt;/script>
</span><span class='line'>      &lt;div class="g-comments"
</span><span class='line'>          data-href=window.location
</span><span class='line'>          data-width="789"
</span><span class='line'>          data-first_party_property="BLOGGER"
</span><span class='line'>          data-view_type="FILTERED_POSTMOD">
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/section>
</span><span class='line'>  {% endif %}
</span><span class='line'>  &lt;!-- Google Comments end --></span></code></pre></td></tr></table></div></figure>


<ul>
<li>接著在 <code>_config.xml</code> 中新增一個 <code>googleplus_comments</code> 參數。如果不想加這個參數，可以把上一段的 if 判斷拿掉，這樣就會一直都出現。維持橡皮人的彈性只是職業病而已。</li>
</ul>


<pre>
# Facebook Like
facebook_like: false

# google comments, by wildwindjen
googleplus_comments: true
</pre>


<ul>
<li>如果你留言送出時，遇到了 <code>Unsafe JavaScript attempt to access frame ...</code> 的訊息，可以改成跟我一樣的作法。我的作法可以讓本機的 <code>preview</code> 也正常。這個問題讓我弄了大半天。原因只是 URL 有誤。可是訊息提示很容易誤導。我最後是在<a href="http://browsingthenet.blogspot.tw/2013/04/google-plus-comments-on-any-website.html" title="這邊">唯一的線索</a>看到某篇回覆參透的。</li>
</ul>


<pre>
    data-href = "http://wildwindjen.github.io" + window.location.pathname
</pre>


<p>這樣就好了，步驟比上個做法簡短，結果更漂亮。只是得改 code 而已。話說 octopress 有提供客製化 post 的機制嗎？實在不是很喜歡這樣直接改 source code。 我喜歡客製化部分跟原生部分切開來。</p>

<h2>Syntax Highlight</h2>

<p>想要使用程式碼美化功能，其實內建就有囉。參考<a href="http://octopress.org/" title="官網">官網</a>下方的 Plugins FTW 。有 <a href="http://octopress.org/docs/plugins/codeblock" title="Cold Block">Cold Block</a> 和 <a href="http://octopress.org/docs/plugins/include-code" title="Include Code">Include Code</a> 兩種。</p>

<h3>Cold Block</h3>

<p>將你的程式碼內嵌在 blog 裡。</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% codeblock [標題] [lang:language] [url] [link text] %}
</span><span class='line'>  程式碼
</span><span class='line'>  {% endcodeblock %}</span></code></pre></td></tr></table></div></figure>


<h3>Include Code</h3>

<p>挑選程式碼檔案出來呈現。預設情況下，程式碼檔案要放在 <code>source/downloads/code</code> 裡面。如果你想要修改預設路徑，可以透過 _config.xml 的 <code>code_dir</code>。所以 <code>path/to/file</code> 是相對於 source/downloads/code 的路徑。</p>

<figure class='code'><figcaption><span>Include Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code [標題] [lang:language] path/to/file %}</span></code></pre></td></tr></table></div></figure>


<h3>安裝 Python</h3>

<p>為了使用 Plugin 功能，需要使用 Python。如果你使用了上述兩個語法，但是在 rake generate 的時候，報了跟我一樣找不到 python 目錄的錯。請你安裝 Python 2.7.x。我是安裝 2.7.4。然後新增系統變數即可。</p>

<h2>外部連結另開</h2>

<p>Markdown 語法產生出來的連結，沒有支援另開頁面，所以只好自己處理。作法很多，我自己的作法是在 <code>/source/_includes/custom/after_footer.html</code> 動手腳。打開檔案，在最下面加上：</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript">
</span><span class='line'>  $('a[href^="http://"]').attr("target", "_blank");
</span><span class='line'>  &lt;/script></span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress by Configuration]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/27/customize-octopress-by-config/"/>
    <updated>2013-04-27T18:49:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/27/customize-octopress-by-config</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
女為悅己者容。
</pre>


<p>這一部份是記錄研究如何客製化成我想要的樣子。先搞定功能的部分。</p>

<p>外表部分，其實早在安裝 octopress 之前看過一輪網路上的參考，就知道預設版型都一樣，不像 wordpress，還有得挑。所以想要有點個人特色，就得靠自己樣樣來。不過看了官方文件，發現常用的東西要客製化也算簡單，真的深入一點可能就得要會 Ruby 打造術了吧。我不會 Ruby，暫時也還沒有計畫去研究，所以我想要先從內建的機制下手: _config.xml。再加上一些些基本 css 和圖片的調整，應該可以有個不太一樣的東西。</p>

<p>功能部分，看了 _config.xml 的設定項目，發現還內建了好幾個 plugin。最開心的是有 syntax highlighting 的部分。這真的是想要做程式相關分享的一大福音啊。</p>

<h2>日期格式</h2>

<p>我對日期格式有一種莫名的偏執。</p>

<ul>
<li>參考 <a href="http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime" title="Ruby Doc datetime format">Ruby Doc</a></li>
<li>打開 _config.xml 修改成:</li>
</ul>


<pre>
date_format: "%Y-%m-%d %H:%M"
</pre>


<h2>留言討論 - 預設的 Disqus</h2>

<p>內建的討論串機制是使用 disqus，要設定真的超級簡單的。假設是沒有 Disqus 帳號的人:</p>

<ul>
<li>註冊帳號。</li>
<li>去註冊信箱收信，並且啟動帳號。</li>
<li>登入 Disqus。點選「Dashboard」功能。</li>
<li>登入首頁左上方有個 「register a site」的連結。</li>
<li>填入 Site URL 和 Site Name 就會自動產生 short name 資訊。點選 continue 之後，隨便選就好，只是要產生你要放的 code。可是我們用不到。</li>
<li>把 short name 填入 _config.xml 裡:</li>
</ul>


<pre>
disqus_short_name: short name
disqus_show_comment_count: true
</pre>


<ul>
<li>是的，這樣就行了，只要執行 deploy 就可以看到下面有 disqus comments 囉。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Octopress Back]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/26/get-back-octopress/"/>
    <updated>2013-04-26T23:58:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/26/get-back-octopress</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
天行健，君子以自戕不息。
有產出，就應該有回收，維持循環的地獄。
</pre>


<p>都放上去 GitHub 了，總得演練怎麼拿回來。下面補充上一篇沒有提到的備份(octopress 官網建議的方式)，並且示範怎麼把備份的東西重新拿回來。</p>

<h2>備份</h2>

<ul>
<li>stage octopress 裡面的檔案</li>
</ul>


<pre>
git add .
</pre>


<ul>
<li>commit 檔案到本地檔案庫，並且填寫描述訊息。</li>
</ul>


<pre>
git commit -m "備份 source"
</pre>


<ul>
<li>從本地檔案庫推到遠端檔案庫，並且指名放在 source branch 裡面。</li>
</ul>


<pre>
git push origin source
</pre>


<h2>取回</h2>

<ul>
<li>假設現在換了一台電腦(先把原本的 octopress 更名)</li>
<li>先從 source branch 複製一份回來，放到 octopress 目錄裡。</li>
</ul>


<pre>
git clone -b source git@github.com:wildwindjen/wildwindjen.github.com.git octopress
</pre>


<ul>
<li>切換到 octopress 目錄裡面</li>
</ul>


<pre>
cd octopress
</pre>


<ul>
<li>從 master branch 複製一份回來，放到 _deploy 目錄裡。(之前 rake deploy 就是把資料推到 master 裡。)</li>
</ul>


<pre>
git clone git@github.com:wildwindjen/wildwindjen.github.com.git _deploy 
</pre>


<ul>
<li>重新安裝必要的環境及設定</li>
</ul>


<pre>
gem install bundler
bundle install
rake install
</pre>


<ul>
<li>重設編碼 (如果跟我一樣是在 windows 上面測試的話。)</li>
</ul>


<pre>
set LC_ALL=zh_TW.UTF-8
set LANG=zh_TW.UTF-8
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Octopress at GitHub]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/25/first-octopress-at-github/"/>
    <updated>2013-04-25T12:30:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/25/first-octopress-at-github</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
不經一試，不長一智。
結果是甜美的，過程是母親的。
</pre>


<p>也不知道在失心瘋什麼，沒碰過 Git，也沒碰過 Ruby，居然學人家搞 octopress。不管怎樣，就這樣一路跌跌撞撞，不懂什麼就補齊什麼。也拼拼湊湊出來一些東西。就順便把經驗整理一下。</p>

<p>在有 proxy 的環境下安裝(ex: 公司)，跟 github 有相關的操作，統一改用 HTTPS 會比較沒問題。在家的話，基本上隨便 google 參考都可以裝成功。因為之前找到的資料幾乎都是 SSH ，反而因為比較少 HTTPS 的方式。以下就直接拿 HTTPS 的建立方式作分享，因為這個方式在家也適用。</p>

<h2>我的環境</h2>

<ul>
<li>OS: Window XP</li>
<li>Git: Git-1.8.1.2-preview20130201</li>
<li>Ruby: Ruby 1.93</li>
</ul>


<h2>GitHub</h2>

<ul>
<li>去 <a href="http://github.com" title="GitHub">GitHub</a></li>
<li>沒帳號就申請帳號</li>
<li>創建帳號後，登入，然後建立一個 Repository，名字叫做 your_github_id.github.com。 (例如我的就是 wildwindjen.github.com)</li>
</ul>


<h2>安裝 Git</h2>

<ul>
<li>下載 <a href="http://git-scm.com/" title="Git">Git</a></li>
<li>直接執行安裝檔，中間除了我想讓 Path 找得到 git ，有改過這頁的設定(Run Git from the Windows Command Prompt)，其他步驟都是預設值。</li>
</ul>


<h2>設定 GitHub SSH Key (這一段是想走 SSH 的人要做的)</h2>

<ul>
<li>參考 <a href="https://help.github.com/articles/generating-ssh-keys" title="generating-ssh-keys">generating-ssh-keys</a></li>
<li>打開 Git Bash</li>
</ul>


<pre>
    cd ~/.ssh
</pre>


<p>如果沒有的話就自己建立一個 .ssh
+ 產生 ssh key</p>

<pre>
    ssh-keygen -t rsa -C "your_email@example.com"
</pre>


<ul>
<li>輸入你想輸入的密碼 passphrase (有寫比較安全，但也可以留空)</li>
<li>複製產生出來的 key，以下的語法我在 window 7 可以執行，但是 XP 不行。(所以直接去 C:\Documents and Settings\wildwindjen.ssh\id_rsa.pub 用編輯器開檔，全選、複製就可以了。)</li>
</ul>


<pre>
    clip < ~/.ssh/id_rsa.pub
</pre>


<ul>
<li>登入 GitHub > Account Setting > SSH Keys，點選 Add SSH Keys 按鈕，名字亂取，把剛剛複製的貼上就好。</li>
</ul>


<h2>安裝 Ruby</h2>

<ul>
<li>參考這篇 <a href="http://itspg.github.io/blog/2012/02/29/octopress-on-windows-tutorial/" title="在windows上安裝octopress 新手教學 / 初學者指南">在windows上安裝octopress 新手教學 / 初學者指南</a></li>
<li>下載 Ruby 和 DevKit</li>
<li>安裝 Ruby ，一路上都是預設值。</li>
<li>新增一個 devkit 目錄，解壓縮 DevKit 到這個目錄 devkit 裡面</li>
<li>打開命令提示字元，切換目錄到 devkit，執行以下目錄，安裝開發用的工具：</li>
</ul>


<pre>
    ruby dk.rb init
    ruby dk.rb install
</pre>


<ul>
<li>更新 gem。</li>
</ul>


<pre>
    gem update --system
</pre>


<h2>安裝 octopress</h2>

<ul>
<li>切換到你想要放 octopress 的目錄</li>
<li>執行以下命令，注意到我這邊是使用 https。</li>
</ul>


<pre>
    git clone https://github.com/imathis/octopress.git octopress
    cd octopress
    gem install bundler
    bundle install
    rake install
</pre>


<h2>設定 octopress</h2>

<ul>
<li>先設定 octopress 要放上去的 Repository</li>
</ul>


<pre>
    rake setup_github_pages
</pre>


<ul>
<li>接著會問你要對應的 github 路徑是哪一個，輸入 your_github_id.github.com 路徑。例如我的是長這樣：</li>
</ul>


<pre>
    git@github.com:wildwindjen/wildwindjen.github.io
</pre>


<ul>
<li>接著就可以打開 octopress/_config.xml 作其他的個人化設定。</li>
</ul>


<h2>撰寫 octopress</h2>

<ul>
<li>先新增一篇文章：</li>
</ul>


<pre>
    rake new_post["文章名稱"]
</pre>


<ul>
<li>去 octopress/source/_posts 就可以看到副檔名 .markdown 的文章。</li>
<li>使用慣用的編輯器打開，使用 markdown 語法開始寫文章吧。</li>
<li>完成的話，要執行以下命令，讓 markdown 檔案轉換成 html：</li>
</ul>


<pre>
    rake generate
</pre>


<ul>
<li>想要在本機預覽:</li>
</ul>


<pre>
    rake preview
</pre>


<ul>
<li>打開瀏覽器，輸入 [http://127.0.0.1:4000/]，就可以預覽結果。(要結束預覽回到命令模式請 ctrl+c)</li>
<li>如果你跟我一樣，有遇到亂碼問題(YAML Exception reading xxx.markdown: invalid byte sequence in CP950 &#8230;)，請：

<ul>
<li>確認檔案編碼是不是使用 UTF-8 存檔。</li>
<li>輸入以下指令
<pre>
  set LC_ALL=zh_TW.UTF-8
  set LANG=zh_TW.UTF-8
</pre></li>
<li>再重新 rake generate 一次</li>
</ul>
</li>
</ul>


<h2>發佈 octopress</h2>

<ul>
<li>預覽都沒問題，就是該放到 github 上囉。直接發佈看看：</li>
</ul>


<pre>
    rake deploy
</pre>


<ul>
<li>假設你跟我一樣，因為某些緣故不能使用 SSH。先確認一下你的 origin，在 octopress/_deploy 目錄下輸入：</li>
</ul>


<pre>
    git remote -v
</pre>


<ul>
<li>應該是會看到以下格式</li>
</ul>


<pre>
    origin  git@github.com:wildwindjen/wildwindjen.github.io (fetch)
    origin  git@github.com:wildwindjen/wildwindjen.github.io (push)
</pre>


<ul>
<li>請輸入以下指令作修改，改走 HTTPS 的方式 deploy：</li>
</ul>


<pre>
git remote set-url origin https://github.com/wildwindjen/wildwindjen.github.com.git
</pre>


<ul>
<li>重新 rake deploy 就好囉。</li>
<li>因為之後會上傳 source ，所以我也在 octopress/ 下確認一次 origin，這邊也是得改走 HTTPS。</li>
</ul>


<h2>未驗證</h2>

<p>寫文章至此，我猜想在做「rake setup_github_pages」步驟時，直接填入 https 格式，應該就沒有後面的麻煩了。之後有時間再踹踹看。</p>

<h2>其他經驗</h2>

<h3>SSH 的 Debug 方式</h3>

<p>過程中遇到一堆 SSH 的問題，直到遇見這個語法，才解除了我盲目的人生。</p>

<pre>
    ssh -vvv git@github.com
</pre>


<h3>SSH 的客製化設定檔</h3>

<p>.ssh 目錄下面可以自己新增一個檔名 config 來做一些客製化的動作，例如：假設有需要把預設的 port 22 改換成 443，可以透過這一招。可惜這次沒機會表現。</p>

<pre>
    Host github.com
    User wildwind.jen@gmail.com
    Hostname ssh.github.com
    Port 443
</pre>

]]></content>
  </entry>
  
</feed>
