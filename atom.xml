<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wild Wind]]></title>
  <link href="http://wildwindjen.github.io/atom.xml" rel="self"/>
  <link href="http://wildwindjen.github.io/"/>
  <updated>2013-09-24T17:58:24+08:00</updated>
  <id>http://wildwindjen.github.io/</id>
  <author>
    <name><![CDATA[Wildwind Jen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ISO 8601]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/09/14/iso-8601/"/>
    <updated>2013-09-14T22:22:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/09/14/iso-8601</id>
    <content type="html"><![CDATA[<h2>事出</h2>

<p>前陣子，工作上遇到一個 Java 定義的 Web Service API，其中一個欄位對方是使用 Calendar 定義出來的日期格式欄位。結果使用 Soup UI 怎麼餵常見的日期格式都不對。直到使用了 ISO 8601 日期格式：
<code>2013-09-14T21:32:08.000+0800</code>。代表的是當地時間 2013-09-14 21:32:08，當地位處於時區 +08:00。</p>

<p>直接去查詢 <a href="http://www.w3.org/TR/xmlschema-2/#dateTime" title="XML DataType">XML 使用的 DataType</a>，其實就會看見「使用 ISO 8601 表示日期時間」的字樣。接著再去看看維基上 <a href="http://zh.wikipedia.org/wiki/ISO_8601" title="ISO 8601">ISO 8601</a>的介紹，其實就不用花太多時間走冤枉路了。</p>

<p>當初則是直接 Java gen code，然後去看底層才知道要餵這個格式。雖然有試著查這個格式叫什麼名字，只是未果。反而是今天研究 JavaScript 才意外知道這個格式叫 ISO 8601。</p>

<h2>ISO 8601</h2>

<p><code>2013-09-14T00:00:00.000+0800</code> (當地時間) 或者 <code>2013-09-14T00:00:00.000Z</code> (UTC 時間)</p>

<p>這個格式唯一好奇的是 T 和 Z。原來在 ISO 8601 裡， T 叫做 <code>time designator</code>，用來指明要開始表示時間了，所以 T 後面就是接時間。</p>

<p>Z 叫做 <code>zone designator</code>，代表使用 <a href="http://zh.wikipedia.org/zh-hant/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6" title="UTC">UTC(Coordinated Universal Time)</a> 表示。UTC 時間 <code>2013-09-14T00:00:00.000Z</code> 意義等同 <code>2013-09-14T00:00:00.000+0000</code>。因為軍事上使用 Z 表示 UTC，發音 zulu ，所以又稱為 zulu time。當地時間裡的 +hhmm 代表時間快 UTC hh時mm分，如果是 -hhmm，就是慢 UTC hh時mm分。意謂著 <code>2013-09-14T00:00:00.000Z</code> 和 <code>2013-09-14T00:08:00.000+0800</code> 實際上才是同一個時間點。</p>

<p>ISO 8601 規格裡提到，使用 local time 表示時，zone designator 應該留白。有一個謎，就是爲什麼 UTC 縮寫跟原本單字順序不合？</p>

<h2>ISO 8601 format String with Java</h2>

<p>以下嘗試使用 Java 取得 ISO 8601 格式的字串，第一個從網路抄過來的。我自己是比較喜歡第三個和第四個。沒辦法，用 DateFormat 用習慣了。不過 JDK 6 (含)以前要完美地轉換大概沒辦法達成，因為底層其實支援的是 RFC 822 ，而不是 ISO 8601，要到 JDK 7 才開始支援。所以網路有人推薦使用 Joda 這個函式庫來處理，因為日期議題比想像中得複雜許多。</p>

<figure class='code'><figcaption><span>google plus comments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import java.text.DateFormat;
</span><span class='line'>import java.text.SimpleDateFormat;
</span><span class='line'>import java.util.Date;
</span><span class='line'>import java.util.TimeZone;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public class ISO8601Demo {
</span><span class='line'>  public static Date d = new Date();
</span><span class='line'>  public static String getISO8601Format1() { return String.format("%tFT%&lt;tRZ", d); }
</span><span class='line'>  public static String getISO8601Format2() { return String.format("%tFT%&lt;tH:%&lt;tM:%&lt;tS.%&lt;tLZ", d); }
</span><span class='line'>  public static String getISO8601Format3() { 
</span><span class='line'>      DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S'Z'");
</span><span class='line'>      return df.format(d);
</span><span class='line'>  }
</span><span class='line'>  public static String getISO8601Format4() { 
</span><span class='line'>      DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SZ");
</span><span class='line'>      return df.format(d);
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  /**
</span><span class='line'>   * @param args
</span><span class='line'>   */
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      System.out.println(d);
</span><span class='line'>      System.out.println(ISO8601Demo.getISO8601Format1());
</span><span class='line'>      System.out.println(ISO8601Demo.getISO8601Format2());
</span><span class='line'>      System.out.println(ISO8601Demo.getISO8601Format3());
</span><span class='line'>      System.out.println(ISO8601Demo.getISO8601Format4());
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>其他參考</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax">Java String Format</a></li>
<li><a href="http://jay-fva.blogspot.tw/2010/02/24gmtutc.html">Java-Two 2013 Joda Slide</a></li>
<li><a href="http://jay-fva.blogspot.tw/2010/02/24gmtutc.html">時區的概念</a></li>
<li><a href="http://stackoverflow.com/questions/2201925/converting-iso8601-compliant-string-to-java-util-date">Java ISO 8601 的複雜</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lexical Scope]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/09/09/lexical-scope/"/>
    <updated>2013-09-09T23:42:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/09/09/lexical-scope</id>
    <content type="html"><![CDATA[<h2>Scope</h2>

<pre><code>定義：可以用以尋找變數的範圍。
</code></pre>

<h2>Lexical Scope</h2>

<p>用來決定「可以使用的 Scope 有哪些」的方式之一，相對的有 Dynamic Scope。</p>

<p>特性：程式的語法結構，就決定了可以在哪些 Scope 尋找變數。</p>

<p>看看以下的範例：</p>

<figure class='code'><figcaption><span>function definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function b(){
</span><span class='line'>  alert(foo);
</span><span class='line'>}
</span><span class='line'>function a(){
</span><span class='line'>  var foo=1;
</span><span class='line'>  b();
</span><span class='line'>};
</span><span class='line'>a();</span></code></pre></td></tr></table></div></figure>


<p>這個範例在使用 Lexical Scope 的語言裡，是行不通的。例如 JavaScript 就會報 <code>ReferenceError: foo is not defined</code> 的錯。原因在於 b function 可以尋找變數的 Scope 只有 b function 和 global enviroment。並不包含 a function。 &#8211; 程式碼的樣子，決定了可以用的 Scope。</p>

<p>Dynamic Scope 的語言會在執行時期，會依照呼叫堆疊(call stack)，來動態決定可以使用的 Scope。所以上述例子，因為可以使用的 Scope 有 b function 、 a function 和 global environment， 就會成功執行，印出 1 。 &#8211; 程式的執行順序，決定了可以用的 Scope。</p>

<h2>Closure</h2>

<p>為什麼要了解 Lexical Scope？ 因為這跟 JavaScript 的 Closure 有關。</p>

<p>看看這個 Closure 的例子：</p>

<figure class='code'><figcaption><span>function definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function a(value){
</span><span class='line'>  return function a(){
</span><span class='line'>      alert(value);
</span><span class='line'>  };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var f = a(1);
</span><span class='line'>var value = 3;
</span><span class='line'>f();</span></code></pre></td></tr></table></div></figure>


<p>如果今天 JavaScript 不是 Lexical Scope 特性的語言。呼叫 f() 的結果，就不會是 1 ，而是 3。Closure 的運用，常見於拍下快照(snapshot)，捕捉當時的值。這是很久以前犯過的錯：</p>

<figure class='code'><figcaption><span>HTML </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="button" value="1">
</span><span class='line'>&lt;input type="button" value="2">
</span><span class='line'>&lt;input type="button" value="3"></span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>jQuery </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var s = $("input").size();
</span><span class='line'>for(var i=0; i&lt;s; i++){
</span><span class='line'>  $("#wade" + i).click(function(){
</span><span class='line'>      alert(i);
</span><span class='line'>  });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>想要按下按鈕時，分別是 0 1 2 ，可是不管按哪一顆，都是 3 。因為大家抓到的 i ，都是「現在」的值。這時候就是要利用 Closure 製造快照的效果，記住「當時」的值。改成：</p>

<figure class='code'><figcaption><span>jQuery </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var s = $("input").size();
</span><span class='line'>for(var i=0; i&lt;s; i++){
</span><span class='line'>  $("#wade" + i).click(function(n){
</span><span class='line'>      return function(){
</span><span class='line'>          alert(n);
</span><span class='line'>      }
</span><span class='line'>  }(i));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>這個例子把想要快照起來的值，當作參數傳遞進去。然後回傳一整個內部函式，代表「當時」的執行狀況。回傳內部函式的時候，會順便創造該時空下的執行環境。可以想像成複製當時 Scope 的樣子，所以當時 Scope 裡變數的值如果是 0 就是 0。</p>

<p>關於 Closure 的細節 ，以後再說吧，畢竟這一篇的主角是 Lexical Scope。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what is hoisted declaration]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/09/08/what-is-hoisted-declaration/"/>
    <updated>2013-09-08T22:13:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/09/08/what-is-hoisted-declaration</id>
    <content type="html"><![CDATA[<h2>Variable Hoisted</h2>

<p>猜猜看以下的程式，答案是什麼？</p>

<figure class='code'><figcaption><span>variable hoisted sample 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a = 1;
</span><span class='line'>function t(){
</span><span class='line'>  console.log(a);
</span><span class='line'>  var a = 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>t();</span></code></pre></td></tr></table></div></figure>


<p>事實上他等同以下程式，JavaScript 底層把宣告的動作自動往上提(hoisted)了。</p>

<figure class='code'><figcaption><span>variable hoisted sample 2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a = 1;
</span><span class='line'>function t(){
</span><span class='line'>  var a;          // declaration hoisted!!
</span><span class='line'>  console.log(a);
</span><span class='line'>  var a = 2;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>t();</span></code></pre></td></tr></table></div></figure>


<h2>Function Hoisted</h2>

<h3>兩種函式定義</h3>

<p>要說明 Function Hoisted 之前，我們拿兩種定義方式來比較： function definition 和 function declaration。</p>

<figure class='code'><figcaption><span>function definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var f = function(){ 
</span><span class='line'>  return 1;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>以及</p>

<figure class='code'><figcaption><span>function declaration </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function f(){ 
</span><span class='line'>  return 1;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<h3>兩種函式的 Hoist 比較</h3>

<p>以下結果是 <code>TypeError: undefined is not a function</code>。確實 var b 往上提了，可是函式主體沒有，所以呼叫了 undefined 當函式。</p>

<figure class='code'><figcaption><span>function hoisted sample 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function b(){
</span><span class='line'>      console.log('w1');
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>function a(){
</span><span class='line'>  b();
</span><span class='line'>  var b = function(){
</span><span class='line'>      console.log('w2');
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>a();</span></code></pre></td></tr></table></div></figure>


<p>如果是使用 function declaration，則結果可以正常執行，執行的 b() 會是 w2。因為除了內部的 function b 宣告以外，連函式主體，都往上提了。</p>

<figure class='code'><figcaption><span>function hoisted sample 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function b(){
</span><span class='line'>      console.log('w1');
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>function a(){
</span><span class='line'>  b();
</span><span class='line'>  function b(){
</span><span class='line'>      console.log('w2');
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>a();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Performance Monitor]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/09/05/windows-performance-monitor/"/>
    <updated>2013-09-05T21:55:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/09/05/windows-performance-monitor</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>I&#8217;m Watching You。</p></blockquote>

<p>當想要監控系統的效能時，總是需要一些工具。目前使用的主要還是 Windows。針對 Windows 的資源監控工具作點紀錄。</p>

<h2>Windows Performance Monitor</h2>

<ol>
<li>啟動 perfmon (或 perfmon.msc)</li>
<li>點選效能監視器</li>
<li>右鍵【新增計數器】</li>
</ol>


<h2>typeperf</h2>

<p>perfmon 對應到 typeperf 的指令</p>

<p>我把他分兩類：有例項和沒有例項。</p>

<p>有例項：
typeperf &#8220;\物件(例項)\計數器&#8221;
例如：</p>

<pre>
typeperf "\Processor Information(_Total)\% Idle Time"
</pre>


<p>沒有例項：
typeperf &#8220;\物件\計數器&#8221;
例如：</p>

<pre>
typeperf "\TCPv6\Connection Failures"
</pre>


<h3>typeperf 相關參數</h3>

<p>typeperf -h 可以看到還有一個完整路徑的寫法：</p>

<figure class='code'><figcaption><span>typeperf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>計數器是效能計數器的完整名稱，格式為
</span><span class='line'>"\\&lt;Computer>\&lt;Object>(&lt;Instance>)\&lt;Counter>"  ，
</span><span class='line'>例如 "\\Server1\Processor(0)\% User Time"。</span></code></pre></td></tr></table></div></figure>


<p>用來查詢所有的計數器：</p>

<pre>
typeperf -q
</pre>


<p></p>

<p>用來查詢該物件所有的計數器：</p>

<pre>
typeperf -q 物件
</pre>


<p>用來查詢該物件所有的例項與計數器組合：</p>

<pre>
typeperf -qx 物件
</pre>


<p>例項使用星號(*)，代表監控全部例項：</p>

<pre>
typeperf "\Processor Information(*)\% Idle Time"
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[馬糞處女作]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/08/05/first-maven-accomplishment/"/>
    <updated>2013-08-05T09:30:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/08/05/first-maven-accomplishment</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>我是個現實主義者，我喜歡目前自己所從事的一切，並對此始終深信不疑。 &#8211; 巴菲特。</p></blockquote>

<p>從做中學累積經驗真的很快，但是沒記下來，就等於沒有。這段期間歷經了幾個問題：</p>

<ol>
<li>編碼議題 (properties)</li>
<li>如何建立本地函示庫 (repository)</li>
<li>特定函式庫只想要支援 compile 階段，但是 package、deploy 不包含。(scope)</li>
<li>FCKeditor 不想要用它依賴的 slf4j-api 版本。(exclusions)</li>
<li>依照佈署環境產生不同的設定檔。(profiles)</li>
</ol>


<p>有些問題之前已經在 <a href="http://wildwindjen.github.io/blog/2013/07/30/migrate-tomcat-webapp-to-maven-qa/">Migrate Tomcat Webapp to Maven QA</a> 分享過了，所以直接看成品囉。</p>

<h2>成品</h2>

<figure class='code'><figcaption><span>google plus comments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
</span><span class='line'>  &lt;modelVersion>4.0.0&lt;/modelVersion>
</span><span class='line'>  &lt;groupId>wild.wind&lt;/groupId>
</span><span class='line'>  &lt;artifactId>WildTest&lt;/artifactId>
</span><span class='line'>  &lt;packaging>war&lt;/packaging>
</span><span class='line'>  &lt;version>1.0-SNAPSHOT&lt;/version>
</span><span class='line'>  &lt;name>WildTest Maven Webapp&lt;/name>
</span><span class='line'>  &lt;url>http://maven.apache.org&lt;/url>
</span><span class='line'>  &lt;!-- -->
</span><span class='line'>  &lt;properties>
</span><span class='line'>      &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding>
</span><span class='line'>      &lt;project.reporting.outputEncoding>UTF-8&lt;/project.reporting.outputEncoding>
</span><span class='line'>  &lt;/properties>
</span><span class='line'>
</span><span class='line'>  &lt;repositories>
</span><span class='line'>      &lt;!-- 建立 Local 函示庫 -->
</span><span class='line'>      &lt;repository>
</span><span class='line'>          &lt;id>ProjectRepo&lt;/id>
</span><span class='line'>          &lt;name>ProjectRepo&lt;/name>
</span><span class='line'>          &lt;url>file:///${project.basedir}/libs&lt;/url>
</span><span class='line'>      &lt;/repository>
</span><span class='line'>  &lt;/repositories>
</span><span class='line'>
</span><span class='line'>  &lt;dependencies>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>junit&lt;/groupId>
</span><span class='line'>          &lt;artifactId>junit&lt;/artifactId>
</span><span class='line'>          &lt;version>3.8.1&lt;/version>
</span><span class='line'>          &lt;scope>test&lt;/scope>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- servlet, tomcat 本身應該要有，所以指定 provided -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>javax.servlet&lt;/groupId>
</span><span class='line'>          &lt;artifactId>servlet-api&lt;/artifactId>
</span><span class='line'>          &lt;version>2.5&lt;/version>
</span><span class='line'>          &lt;scope>provided&lt;/scope>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- jsp, tomcat 本身應該要有，所以指定 provided -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>javax.servlet&lt;/groupId>
</span><span class='line'>          &lt;artifactId>jsp-api&lt;/artifactId>
</span><span class='line'>          &lt;version>2.0&lt;/version>
</span><span class='line'>          &lt;scope>provided&lt;/scope>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- MySQL JDBC, 模擬佈署環境 tomcat 自己放，所以指定 provided -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>mysql&lt;/groupId>
</span><span class='line'>          &lt;artifactId>mysql-connector-java&lt;/artifactId>
</span><span class='line'>          &lt;version>5.2.18&lt;/version>
</span><span class='line'>          &lt;scope>provided&lt;/scope>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- Oracle JDBC, 模擬佈署環境 tomcat 自己放，所以指定 provided -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>oracle&lt;/groupId>
</span><span class='line'>          &lt;artifactId>ojdbc14&lt;/artifactId>
</span><span class='line'>          &lt;version>1.0&lt;/version>
</span><span class='line'>          &lt;scope>provided&lt;/scope>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- Struts -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>struts&lt;/groupId>
</span><span class='line'>          &lt;artifactId>struts&lt;/artifactId>
</span><span class='line'>          &lt;version>1.2.0&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- FCKeditor, 改用比較新的 slf4j-api -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>net.fckeditor&lt;/groupId>
</span><span class='line'>          &lt;artifactId>java-core&lt;/artifactId>
</span><span class='line'>          &lt;version>2.0&lt;/version>
</span><span class='line'>          &lt;exclusions>
</span><span class='line'>              &lt;exclusion>
</span><span class='line'>                  &lt;groupId>org.slf4j&lt;/groupId>
</span><span class='line'>                  &lt;artifactId>slf4j-api&lt;/artifactId>
</span><span class='line'>              &lt;/exclusion>
</span><span class='line'>          &lt;/exclusions>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>      
</span><span class='line'>      &lt;!-- slf -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>org.slf4j&lt;/groupId>
</span><span class='line'>          &lt;artifactId>slf4j-api&lt;/artifactId>
</span><span class='line'>          &lt;version>1.5.8&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>org.slf4j&lt;/groupId>
</span><span class='line'>          &lt;artifactId>slf4j-simple&lt;/artifactId>
</span><span class='line'>          &lt;version>1.5.8&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;!-- 去 Local 函示庫找 Jar 檔 -->
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>wild&lt;/groupId>
</span><span class='line'>          &lt;artifactId>wind&lt;/artifactId>
</span><span class='line'>          &lt;version>1.0&lt;/version>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>wild&lt;/groupId>
</span><span class='line'>          &lt;artifactId>wild&lt;/artifactId>
</span><span class='line'>          &lt;version>1.0&lt;/version>
</span><span class='line'>          &lt;classifier>encode&lt;/classifier>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>
</span><span class='line'>      &lt;dependency>
</span><span class='line'>          &lt;groupId>wild&lt;/groupId>
</span><span class='line'>          &lt;artifactId>wild&lt;/artifactId>
</span><span class='line'>          &lt;version>1.0&lt;/version>
</span><span class='line'>          &lt;classifier>decode&lt;/classifier>
</span><span class='line'>      &lt;/dependency>
</span><span class='line'>  &lt;/dependencies>
</span><span class='line'>  
</span><span class='line'>  &lt;profiles>
</span><span class='line'>      &lt;!-- 本機開發設定檔 -->
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>dev_local&lt;/id>
</span><span class='line'>          &lt;activation> &lt;!-- 預設使用此設定檔 -->
</span><span class='line'>              &lt;activeByDefault>true&lt;/activeByDefault>
</span><span class='line'>          &lt;/activation>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-war-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.2&lt;/version>
</span><span class='line'>                      &lt;configuration>
</span><span class='line'>                          &lt;webResources>
</span><span class='line'>                              &lt;resource>
</span><span class='line'>                                  &lt;directory>src/main/webconf/dev_local&lt;/directory>
</span><span class='line'>                                  &lt;targetPath>WEB-INF&lt;/targetPath>
</span><span class='line'>                              &lt;/resource>
</span><span class='line'>                          &lt;/webResources>
</span><span class='line'>                      &lt;/configuration>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>      
</span><span class='line'>      &lt;!-- 線上設定檔 -->
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>prod&lt;/id>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-war-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.4&lt;/version>
</span><span class='line'>                      &lt;configuration>
</span><span class='line'>                          &lt;webResources>
</span><span class='line'>                              &lt;resource>
</span><span class='line'>                                  &lt;directory>src/main/webconf/prod&lt;/directory>
</span><span class='line'>                                  &lt;targetPath>WEB-INF&lt;/targetPath>
</span><span class='line'>                              &lt;/resource>
</span><span class='line'>                          &lt;/webResources>
</span><span class='line'>                      &lt;/configuration>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>
</span><span class='line'>  &lt;build>
</span><span class='line'>      &lt;finalName>WildTest&lt;/finalName>
</span><span class='line'>  &lt;/build>
</span><span class='line'>&lt;/project></span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do The Right Thing]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/08/03/do-the-right-thing/"/>
    <updated>2013-08-03T22:10:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/08/03/do-the-right-thing</id>
    <content type="html"><![CDATA[<h2>我對洪案的看法</h2>

<p>沒有真相。是的，質疑很多、爆料很多，但是沒人可以打包票說這些就是事實。這段期間多多少少會關注一下這方面的消息，從媒體、社群，甚至是軍旅版的爆掛。</p>

<p>這些八卦消息，其實大多數根本未經證實，其中很多訊息只是單純揣測，甚至有不少負面消息與本案無關，但是從社群網路、BBS 討論回文，會發現人群已經有人未審先判，幫部分人士定罪了。</p>

<blockquote><p>你腦中只出現一個解釋，卻不知還有另一個解釋的可能性存在。</p></blockquote>

<p>在【快思慢想】的【驟下結論的機制】這個章節，有這幾段文字：</p>

<blockquote><p>人們依已知的訊息建構出合理故事的連貫性，增強了他們的信心。這跟故事的一致性有關，跟完整性無關。</p></blockquote>

<p>也跟這些訊息是否為事實無關。</p>

<p>有著相同情緒的人，各自提出自己但是雷同的推理版本，加強了情節的一致性。所以部分的人相信了，這個推斷但是未經證實的版本。「魔頭」、「幫兇」、「冷血」，是真的嗎？有沒有可能是每個人犯一堆小錯，所以堆疊出這個大錯？</p>

<p>你可能會說，雖然是推斷，但是很有可能。</p>

<p>我從不否認可能性，但是再多的可能都是未經證實。只是如果這些推測版本，真的不是事實，當有一天，真相真的出現在眼前的時候，你的心，還有空間容得下嗎？</p>

<p>無論如何，心中必須畫下一條線，清楚哪些是確定的、哪些未確定的，才能冷靜思考，不被情緒左右，不被大腦操弄。</p>

<p>勿枉。勿縱。這不只是軍方該持有的標準，也是你我該追求的目標。</p>

<h2>上街頭的理由</h2>

<p>那為什麼我今天要上街頭？因為我覺得這個過度封閉的系統，真的需要改革。</p>

<blockquote><p>只看到一方證據的受試者，比看到兩造證據的受試者，對自己的判斷更具信心。</p></blockquote>

<p>今天我看到的，就是這樣的情境。為什麼這麼多人相信自己的推測？因為沒有對等、對立的訊息量，來證實或推翻這些揣測。為什麼沒有該出現的訊息？今晚的貼紙很中肯：</p>

<p><img class="center" src="http://wildwindjen.github.io/images/wildwind/do_the_right_thing/reason.jpg" width="600" height="350" title="reason" alt="reason"></p>

<p>為什麼要積極追查真相這麼難？為什麼一個受害者家屬服喪期間，可以作的事比一個組織還多？為什麼一個受害者家屬展現出來的，還比較頭腦清醒且理智？</p>

<p>這麼龐大的組織，擁有這麼大的權力、這麼多的資源，卻如此鈍化，幾乎沒有什麼作為。如果不是推理版本所謂的「黑暗」，那除了「疏懶」，真的找不出其他的解釋。造成今日這種局面，我只能說國防部活該。</p>

<p>以我所知道的事實，我所看到的部分，我上街頭的理由，是針對這個扭曲的制度、不透明的組織文化，而不是那群人。</p>

<p>這次活動的訴求很中肯，而且真的冷靜理性和平：</p>

<p><img class="center" src="http://wildwindjen.github.io/images/wildwind/do_the_right_thing/ask.jpg" width="600" height="350" title="ask" alt="ask"></p>

<h2>其實我不熱血</h2>

<p>這次出去，身邊的人說我熱血。其實我不認為我熱血，既沒衝勁，也很平和。</p>

<p>我只是認知到不能漠視這個土地的事情，這個年紀了，要有這個國家當家世代的自覺。那群老的陸陸續續會退下來，我們這個世代的早就該學著接棒。其實早就不是個小孩子，之前都渾渾噩噩的，但是 30 歲了，不能再對這塊土地漠不關心。如果我們這個世代還是像小孩一樣對這個社會冷淡、對這個國家一無所知，只會人云亦云，未來會如何？</p>

<p>我不是熱血，我只是在學習承擔責任而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Tomcat Webapp to Maven QA]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/07/30/migrate-tomcat-webapp-to-maven-qa/"/>
    <updated>2013-07-30T09:22:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/07/30/migrate-tomcat-webapp-to-maven-qa</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>我有預感，這只是個開始。&#8211; 毛利小五郎。</p></blockquote>

<p>工作上做了點嘗試，把剛接手的專案，試著導入 Maven 。因為想要針對一團亂的外部函式庫做管理。而馬糞，是我第一個想到的。倉促之下，只能先做問題集的整理。</p>

<h2>原本的專案編碼是 UTF-8</h2>

<p>這個問題大概只有發生在開發平台是 windows 的吧。偏偏我就是其中一個受害者。目前已知有兩個作法，實際上是同一種解法，就是餵 <code>project.build.sourceEncoding</code> 系統屬性值給他。</p>

<h3>作法一 Command Line</h3>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn -Dfile.encoding=UTF-8 -Dproject.build.sourceEncoding=UTF-8 package</span></code></pre></td></tr></table></div></figure>


<h3>作法二 POM.xml</h3>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project  xmlns=....>
</span><span class='line'>      ...
</span><span class='line'>      &lt;properties>
</span><span class='line'>          &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding>
</span><span class='line'>      &lt;/properties></span></code></pre></td></tr></table></div></figure>


<h2>去哪裡得知外部函式庫的 maven 設定</h2>

<p>假設我是要加進來 log4j ，請 google maven log4j。你會找到<a href="http://www.mvnrepository.com/artifact/log4j/log4j">這一頁</a>。請點選你想要找的版本，接著就是複製設定到 pom.xml 了。</p>

<h2>自家的 jar ，怎麼兜進去</h2>

<p>在專案目錄下新建一個 libs 子目錄(跟 pom.xml 同一層)。準備放自家的函式庫。</p>

<p>依照 maven 的版控結構規則，重新建立子目錄 <code>{gourpId}/{artifactId}/{version}</code> 以及重新命名 jar 為 <code>{artifactId}-{version}.jar</code> 。</p>

<p>舉例來說：原本叫做 wade.jar 的檔案，我就隨便給他個 groupId=wild 、 artifactId=wind 、 version=1.0。所以我就必須在 {PROJECT_DIR}/libs 下建立 wild/wind/1.0/wind-1.0.jar。</p>

<p>然後記得新增 repository 和 dependency 設定，請參考下方。</p>

<p>有個延伸題，我有兩個 jar 檔，都想要放在 wild/wind/1.0/ 下怎麼辦，請多設定個 <code>classifier</code> ，檔案的命名就變成要 <code>{artifactId}-{version}-{classifier}.jar</code>。</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project  xmlns=....>
</span><span class='line'>      ...
</span><span class='line'>      &lt;repositories>
</span><span class='line'>          &lt;repository>
</span><span class='line'>              &lt;id>ProjectRepo&lt;/id>
</span><span class='line'>              &lt;name>ProjectRepo&lt;/name>
</span><span class='line'>              &lt;url>file:///${project.basedir}/libs&lt;/url>
</span><span class='line'>          &lt;/repository>
</span><span class='line'>      &lt;/repositories>
</span><span class='line'>      ....
</span><span class='line'>      &lt;dependencies>
</span><span class='line'>          &lt;dependency>
</span><span class='line'>              &lt;groupId>wild&lt;/groupId>
</span><span class='line'>              &lt;artifactId>wind&lt;/artifactId>
</span><span class='line'>              &lt;version>1.0&lt;/version>
</span><span class='line'>              &lt;classifier>encode&lt;/classifier>
</span><span class='line'>          &lt;/dependency>
</span><span class='line'>          &lt;dependency>
</span><span class='line'>              &lt;groupId>wild&lt;/groupId>
</span><span class='line'>              &lt;artifactId>wind&lt;/artifactId>
</span><span class='line'>              &lt;version>1.0&lt;/version>
</span><span class='line'>              &lt;classifier>decode&lt;/classifier>
</span><span class='line'>          &lt;/dependency>
</span><span class='line'>      &lt;/dependencies></span></code></pre></td></tr></table></div></figure>


<h2>The method getJspApplicationContext(ServletContext) is undefined for the type JspFactory</h2>

<p>說穿了，就是原本 tomcat 就有 jsp-api.jar (servlet-api.jar 也一樣)，匯出來的專案又包含了 jsp-api.jar，所以造成用錯版本。</p>

<p>所以要達成一個目標：package 之後的動作都不要有 jsp-api.jar 。這時候就要靠這一味： scope 。
至於值的意義請參考 <a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope%20Dependency_Scope">Dependency Scope</a></p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency>
</span><span class='line'>      &lt;groupId>javax.servlet&lt;/groupId>
</span><span class='line'>      &lt;artifactId>jsp-api&lt;/artifactId>
</span><span class='line'>      &lt;version>2.0&lt;/version>
</span><span class='line'>      &lt;scope>provided&lt;/scope>
</span><span class='line'>  &lt;/dependency></span></code></pre></td></tr></table></div></figure>


<p>本來如果只是這樣就罷手，也就無事一身輕。偏偏想到目前開發都是使用 eclipse，就騷屁股(台語)地想要一氣呵成。所以又有下面的 m2eclipse 篇。</p>

<h2>m2eclipse 沒有 run on server</h2>

<p>專案 > 屬性 > Facets
勾選 Dynamic Project Module，並且記得挑選版本。否則之後無法變更。</p>

<h2>lib 不會跟著 deploy 到 tomcat plugin</h2>

<p>參考 <a href="http://stackoverflow.com/questions/6356421/maven-tomcat-projects-in-eclipse-indigo-3-7">stackover</a> ，使用路徑定義的方式 Deployment Assemply。</p>

<ul>
<li>maven 專案目錄上按右鍵，properties。</li>
<li>新增對應(Folder)

<ul>
<li>Source: target/{your-project-name}/WEB-INF/lib</li>
<li>Deploy Path: WEB-INF/lib</li>
</ul>
</li>
<li>Run As：

<ul>
<li>Maven Clean</li>
<li>Maven Install</li>
<li>Run on Server</li>
</ul>
</li>
</ul>


<h2>不同環境，不同的設定</h2>

<p>我在我的主程式多了一層子目錄 <code>webconf</code>，裡面放置各種環境的設定檔。下面我模擬了 dev 和 online 兩個情境，<code>src/main/webconf/dev</code> 和 <code>src/main/webconf/online</code>，分別放置開發環境跟線上環境的設定檔。</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>... ...
</span><span class='line'>  &lt;/dependencies>
</span><span class='line'>  &lt;!-- -->
</span><span class='line'>  &lt;profiles>
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>dev&lt;/id>
</span><span class='line'>          &lt;activation>
</span><span class='line'>              &lt;activeByDefault>true&lt;/activeByDefault>
</span><span class='line'>          &lt;/activation>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-war-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.2&lt;/version>
</span><span class='line'>                      &lt;configuration>
</span><span class='line'>                          &lt;webResources>
</span><span class='line'>                              &lt;resource>
</span><span class='line'>                                  &lt;directory>src/main/webconf/dev&lt;/directory>
</span><span class='line'>                                  &lt;targetPath>WEB-INF&lt;/targetPath>
</span><span class='line'>                              &lt;/resource>
</span><span class='line'>                          &lt;/webResources>
</span><span class='line'>                      &lt;/configuration>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>online&lt;/id>
</span><span class='line'>          &lt;build>
</span><span class='line'>              &lt;plugins>
</span><span class='line'>                  &lt;plugin>
</span><span class='line'>                      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>                      &lt;artifactId>maven-war-plugin&lt;/artifactId>
</span><span class='line'>                      &lt;version>2.4&lt;/version>
</span><span class='line'>                      &lt;configuration>
</span><span class='line'>                          &lt;webResources>
</span><span class='line'>                              &lt;resource>
</span><span class='line'>                                  &lt;directory>src/main/webconf/online&lt;/directory>
</span><span class='line'>                                  &lt;targetPath>WEB-INF&lt;/targetPath>
</span><span class='line'>                              &lt;/resource>
</span><span class='line'>                          &lt;/webResources>
</span><span class='line'>                      &lt;/configuration>
</span><span class='line'>                  &lt;/plugin>
</span><span class='line'>              &lt;/plugins>
</span><span class='line'>          &lt;/build>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>  &lt;build>
</span><span class='line'>      ... ...</span></code></pre></td></tr></table></div></figure>


<p>接著，輸入</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn package -P dev</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn package -P online</span></code></pre></td></tr></table></div></figure>


<p>即可輸出不同情境的佈署檔案。是不是很方便啊？</p>

<p><code>activeByDefault</code> 則是用來設定哪一個為預設的情境。所以</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn package -P dev</span></code></pre></td></tr></table></div></figure>


<p>跟</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn package</span></code></pre></td></tr></table></div></figure>


<p>是一樣的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[馬糞(Maven)初體驗]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/05/16/maven-install/"/>
    <updated>2013-05-16T22:42:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/05/16/maven-install</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>當個新時代的糞青。</p></blockquote>

<p>知道馬糞這個東西很久了，最近突然想起來，開始來玩看看。當然，會突然想起他，是因為想要拿來管理一些手上的專案。Maven 是一個軟體專案管理工具，除了軟體建構(Building)、測試、打包、佈署以外，還包含套件依賴性解決以及軟體分享的特性，定位其實跟 ANT 等 Building Tool 不太一樣。</p>

<p>在軟體建構部分，和 Ant 最大的不同在於，Maven 是採慣例制的(Convension Over Configuration)。也就是說，很多東西可以不設定，會有預設值，而這個預設值，是大部分情況下適用的(慣例)。不用像 Ant 一樣，每個動作都指定到位。只需要針對和慣例不同的特殊狀況，再去設定變更即可。輕鬆多了。</p>

<h2>安裝</h2>

<ul>
<li>先至<a href="http://maven.apache.org/download.cgi%20Maven">Maven官網</a>下載</li>
<li>解壓縮之後，放到想放的地方</li>
<li>設定系統的環境變數 M2_HOME，指到剛剛的馬糞目錄，例如我的就是 <code>D:\PROGRAM\apache-maven-3.0.5</code>。</li>
<li>接著在 path 變數新增 %M2_HOME%\bin。</li>
<li>打開 console 介面，執行 <code>mvn --version</code>。應該要看到類似的訊息：</li>
</ul>


<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:
</span><span class='line'>28+0800)
</span><span class='line'>Maven home: D:\PROGRAM\apache-maven-3.0.5
</span><span class='line'>Java version: 1.6.0_38, vendor: Sun Microsystems Inc.
</span><span class='line'>Java home: C:\Program Files\Java\jdk1.6.0_38\jre
</span><span class='line'>Default locale: zh_TW, platform encoding: MS950
</span><span class='line'>OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"</span></code></pre></td></tr></table></div></figure>


<h2>行前教育</h2>

<p>從 <code>Maven: The Definitive Guide</code> 裡面得知，Maven 核心做的事情很少，除了解析 XML 和追蹤生命週期、外掛的能力以外，主要是透過外掛(Plugins)撐完全場。</p>

<pre>
The core of Maven is pretty dumb, it doesn't know how to do much beyond parsing
a few XML documents and keeping track of a lifecycle and a few plugins.
</pre>


<h3>Plugins &amp; Goals</h3>

<p>把 Plugins 想成一個個獨立的元件(或者分類，相關類型的功能總是會集中在一起)，而每個元件各自提供一或者多個功能，這些功能我們稱它為 Goals。每個 Goal 都是代表一個獨立的任務，是 Maven 執行工作的最小單位。</p>

<p><code>compiler:compile</code> 代表的就是 compiler 這個 plugin 下的 compile goal。</p>

<p>由於透過網路眾人的力量以及分享，Plugins 函式庫日益成長茁壯，可以支援的能力包山包海，讓整個軟體的建構、管理，不太需要重頭到尾打造，最多只要微調。</p>

<h3>Build Lifecycle 和 Phases</h3>

<p>剛剛提到 Goals 負責的是各自獨立的作業，彼此之前沒有任何關係，或者順序性上的依賴。如果直接拿 Goal 來用，設定會變得太瑣碎。所以需要有更宏觀的概念，也就是所謂的生命週期(Build Lifecycle)和階段(Phases)。</p>

<p>目前 Maven 內建了三大 Build Lifecycle： Default、Clean、Site。</p>

<ul>
<li>Default 是專案建構流程的生命週期。</li>
<li>Clean 是處理專案清空任務時的生命週期。</li>
<li>Site 則用來產生描述專案相關資訊的站台文件時的生命週期。</li>
</ul>


<p>每個生命週期都各自包含了多個階段，代表的是生命週期裡的步驟。拿最常用的 Default 來看，常用的階段如下：(詳細定義請參考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference%20%20Lifecycle%20Reference">Lifecycle Reference</a>)</p>

<ul>
<li>compile: 編譯程式。</li>
<li>test: 測試已編譯的程式。</li>
<li>package: 將已編譯的程式打包。例如打包成 JAR 檔。</li>
<li>install: 將打包檔放進去本地的 Respository。</li>
<li>deploy: 將最後成品分享至遠端的 Respository。</li>
</ul>


<p>階段本身有順序上的依賴，也就是當命令下達執行 test 階段時，test 之前的階段，都會先依序被執行。那執行到底是執行哪些動作呢？</p>

<p>之前說了，Goal 才是執行工作的最小單位，所以 Phase 和 Goal 必須建立起連結關係。可以查看 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings%20%20Built-in%20Lifecycle%20Bindings">Built-in Lifecycle Bindings</a>。左邊是 Phase ，右邊是對應到的 Goal(格式 Plugin:Goal)。</p>

<p>所以，許多 Phases 組成一個 Lifecycle，而每個 Phase 又是對應到(binding)一或多個 Goal。Lifecycle 代表的是想要執行的管理種類(建構、清理、還是產生站台文件)，Phase 負責順序上的依賴，以及簡化設定的使命，Goal 就是真正執行功能的小螺絲。</p>

<h3>Packaging</h3>

<p>哪些 Goal 對應到哪些 Phase，依照 POM 內的 packaging 元素設定，會略有不同，請參考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings%20%20Built-in%20Lifecycle%20Bindings">Built-in Lifecycle Bindings</a>。</p>

<p>拿 jar 跟 ear 來比較，可以得知 package phase 所使用的 goal 就不一樣了。packaging 預設值是 jar。</p>

<p>因為 packaging 元素設定，支援的 Phase 似乎也略有差異。</p>

<h3>Plugin</h3>

<p>透過 POM 的 plugin 設定，可以為各預設的 Phase 加上一些額外的 Goal，執行的順序依序為：內建、自行設定(自行設定的順序則以在 POM 上的順序)。以下例子是示範為 process-test-resources Phase 新增一個 time 的 Goal。</p>

<figure class='code'><figcaption><span>maven plugin setting </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin>
</span><span class='line'>    &lt;groupId>com.mycompany.example&lt;/groupId>
</span><span class='line'>    &lt;artifactId>display-maven-plugin&lt;/artifactId>
</span><span class='line'>    &lt;version>1.0&lt;/version>
</span><span class='line'>    &lt;executions>
</span><span class='line'>        &lt;execution>
</span><span class='line'>            &lt;phase>process-test-resources&lt;/phase>
</span><span class='line'>            &lt;goals>
</span><span class='line'>                &lt;goal>time&lt;/goal>
</span><span class='line'>            &lt;/goals>
</span><span class='line'>        &lt;/execution>
</span><span class='line'>    &lt;/executions>
</span><span class='line'>&lt;/plugin></span></code></pre></td></tr></table></div></figure>


<p>話說 Goal 本身就有資訊來註記可以綁到哪些 Phase 上了，所以假設上面的 time 這個 Goal 在他裡面註記只能綁到 process-test-resources Phase，其實 phase 元素的設定是可以省略的。</p>

<h3>groupId, artifactId, version</h3>

<p>Maven 使用這三個資訊來定位座標。講白話一點，就是這三個資訊加起來，是一個專案的識別碼。</p>

<ul>
<li>groupId 代表的是公司、組織或團隊資訊。</li>
<li>arifactId 是單一專案名稱</li>
<li>version 是專案的版號</li>
</ul>


<p>以上三個資訊在不同專案間，不能完全一模一樣。packaging 雖然也是重要的資訊，但不是用來定位的一份子。標記格式如下：</p>

<pre>
groupId:artifactId:packaging:version
</pre>


<p>這樣的標記方式應用於 Maven 的依賴機制上。</p>

<p>在下面我將會創建一個 wild.wind:wadetest:jar:1.0-SNAPSHOT 專案當範例。</p>

<h2>開始第一個 Maven</h2>

<ul>
<li>建立第一個 Maven</li>
</ul>


<pre>
mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DgroupId=wild.wind -DartifactId=wadetest
</pre>


<p>會看到許多專案類型可以挑選，預設是 264 org.apache.maven.archetypes:maven-archetype-quickstart (An archetype which contains a sample Maven project.)。採用預設直接按 Enter 就好，想要挑別的，就輸入對應的編號，再按 Enter。
<img class="center" src="http://wildwindjen.github.io/images/wildwind/maven_install/first_maven.png" width="600" height="350" title="Choose Maven Project" alt="Choose Maven Project"></p>

<ul>
<li>接著會要你挑專案類型使用的版本(別懷疑，同一種類型不只一種版本可以挑)，小的習慣預設值。</li>
<li>然後設定想要的版號，這個資訊是會出現在自己專案的 POM 裡。跟上面那個不一樣。</li>
<li>然後要你確認一下資訊對不對。按下 Enter 就建立完成了。</li>
</ul>


<p>想要直接指定建立的專案類型，不想在那邊挑，只要輸入時，直接改指定 archetypeArtifactId 的值：</p>

<pre>
mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=wild.wind -DartifactId=wadetest
</pre>


<p>記得 maven-archetype-quickstart 換成你要使用的 artifactId 就好。如果不知道 artifactId 在哪裡，跑列表的時候就有看到囉，想辦法找你常用的吧。</p>

<pre>
....
264: remote -> org.apache.maven.archetypes:maven-archetype-quickstart ....
265: remote -> org.apache.maven.archetypes:maven-archetype-site   ...
</pre>


<p>回來現場。打開新建的 Maven 專案目錄，最簡單的 Java 專案可以看到裡面的目錄結構大致如下：</p>

<pre>
wadetest
    POM.xml
    src
        main
            java
        test
</pre>


<p>這是最簡單的樣子，Maven 專案的大原則就是要有 POM.xml ，以及 src 下有 main、test ，test 是用來放測試程式的。main 下面放的是 source code，依照你的專案類型 main 底下有不同的子目錄分類。Spring 類型的 Maven 專案就可能長這樣：</p>

<pre>
wadetest
    POM.xml
    src
        main
            java
            resources
            webapp
                WEB-INF
        test
</pre>


<p>compile 後 src 會多一個兄弟目錄 target。裡面就是放著成品，可能是 classes ，也有可能是打包後的 jar。</p>

<pre>
wadetest
    POM.xml
    src
        main
            java
        test
    target
        classes
</pre>


<p>就這樣，跟一般 java 專案目錄結構比起來，src 下多了 main、test 而已，而不是直接放 source code。</p>

<h2>執行專案建構週期</h2>

<p>試試依序以下的命令，並在每一次執行後，去看看目錄的變化</p>

<ul>
<li>mvn compile</li>
<li>mvn test</li>
<li>mvn package</li>
<li>mvn clean</li>
</ul>


<p>以後要直接打包，直接 <code>mvn package</code> 就好，前面的步驟會自動先做。</p>

<h2>進階指令</h2>

<h3>想要知道這個 plugin 有哪些 goals</h3>

<p>可以使用 help 這個 plugin 裡面的 describe。示範用來查詢 compiler 這個 plugin：</p>

<pre>
mvn help:describe -Dplugin=compiler -Dmedium=true
</pre>


<p>或者如果 plugin 有提供 help，就直接執行看看：</p>

<pre>
mvn compiler:help
</pre>


<h2>待學習</h2>

<p>如果只是單純的私下開發與管理，以上的觀念應該是夠用了，但是如果要跟外面世界合作應該還要搞懂 Remote Repository。另外 Local Repository &amp; Remote Repository 負責了 Maven 的依賴性管理，詳細機制需要再研究。</p>

<p>再找時間踹看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[物件導向]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/30/object-oriented/"/>
    <updated>2013-04-30T14:36:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/30/object-oriented</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>「只重其義，不重其招，你忘記所有招式，就練成了！ 」「你記住了沒？」 &#8211;  張三豐。</p></blockquote>

<p>這篇是因為我必須要在部門裡面作教育訓練，對於物件導向要怎麼上手，整理出來的心得。重點不在於教物件導向是什麼，而是分享經驗，讓想學物件導向的人，知道如何少繞一點路，減輕一點混亂。如果你是那種搞不懂類別和物件的區別、對多型還是霧颯颯的，你可以參考看看。</p>

<h2>必須先知道的事</h2>

<ul>
<li>物件導向，主角是觀念，是思維。專案開發過程都使用物件導向的思維去分析、設計、實作時，這就是導入物件導向。否則，就算使用了 Java、 Dot Net 世界上任何一種支援物件導向能力的語言，都不代表這個專案使用物件導向開發。</li>
<li>需求、需求、需求。你的需求才是決定你採用什麼方式開發專案的唯一因素。</li>
<li>除了繼承、封裝、多型這些物件導向的特性，應該更加注意<code>需求-&gt;各角色職責分工</code>。</li>
</ul>


<h2>跳躍門檻</h2>

<p>從開始接觸物件導向到現在，覺得最大的門檻在於如何簡單說明類別與物件，在於多型如何一言以蔽之。一旦這兩個容易讓人混亂的概念容易被釐清，後面的路就好走多了(一路好走)。</p>

<p>所以，要先懂得區分「抽象的概念」與「具體的成品」。</p>

<p>拿安全帽來舉例，「法律規定，騎車要戴安全帽」和「你戴這一頂安全帽出門」，這兩個句子裡安全帽，意義上是不太一樣的。「法律規定，騎車要戴安全帽」的安全帽是一種統稱，泛指安全帽這<code>種類</code>的帽子，所以是一種抽象的概念。而「你戴這一頂安全帽出門」的安全帽，則是明確的指出一個實體，是一個具體的成品。</p>

<p>如果你區分得出來我說的這兩種安全帽邏輯上的不同，我們就安心地進入物件導向的世界吧。</p>

<h2>Java 裡的抽象概念和具體成品</h2>

<p>在 Java 裡，類別(Class)和介面(Interface)來定義抽象概念的機制，而依照類別產生出來的具體成品我們叫物件(Object)，依照介面定義，撰寫實際程式碼而成的具體成品我們稱為實作(Implementation)。</p>

<h2>類別(Class)</h2>

<p>物件導向觀念裡的類別，簡單地說，就是分類出來的類型。就像是生物學裡的<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%88%86%E9%A1%9E%E6%B3%95" title="生物分類法">生物分類法</a>。屬於同一類型的東西，都有相同的特徵，相同的基礎能力。</p>

<p>如果要說這個類別跟生物學的種類差異點在哪裡的話，生物學的種類是將已存在的東西做分類，而程式的類別則是你先定義出這個類別的特徵與標準，然後再製作出來。這個就像是工廠製造，先刻一個模子出來，然後再去生產成品。<img class="center" src="http://wildwindjen.github.io/images/wildwind/object_oriented/class.jpg" width="600" height="350" title="class and objects" alt="class and objects"></p>

<p>所以，是的，你得先知道你想創造類別的特徵跟分類定義，才能打造這個模子，你才能寫出這個類別。這代表，你得先圈畫出你想要解決的問題領域，然後從這個領域範圍裡蒐集所有的相關需求，最後從需求裡面作職責分工、分類。</p>

<p>程式的類別，就是讓程式設計師可以「創造」一種分類，同時滿足了現實世界中人為分類跟生物分類的特性。人為分類滿足的就是先設計，再批次製造。生物分類重要的特性是演化，也就是程式中提到的繼承。</p>

<h2>繼承(Inheritance)</h2>

<p>物件導向觀念裡的類別跟真實世界的物種一樣，有遺傳的概念。在物件導向世界裡叫做繼承。不過跟這篇<a href="http://milikao.pixnet.net/blog/post/543716-%E7%B9%BC%E6%89%BF%E6%98%AF%E7%88%B6%E5%AD%90%E9%97%9C%E4%BF%82%EF%BC%9F%E6%89%8D%E6%80%AA%EF%BC%81-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%88%9D%E5%AD%B8%E8%80%85%E6%87%89" title="繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)">繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)</a>作者一樣，我覺得遺傳的這個詞比較好。因為繼承是人為的，可以放棄繼承。但遺傳是天生的，後來衍生的種類是沒辦法放棄的。而物件導向的繼承你是不能放棄繼承的，一旦基礎類別(Base Class)有這個特徵，衍生類別(Derived Class )就必須有。這種特性比較像是遺傳。</p>

<p>但是在這裡我們還是隨波逐流，使用繼承一詞。</p>

<p>繼承是類別跟類別間的關係。衍生類別繼承了基礎類別，會有相同的特徵(feature)。接著衍生類別可以以這個為基礎，繼續擴充、發展自己的獨特特徵。衍生類別雖然不能放棄繼承，但是可以改造這個特徵。程式的世界叫做覆寫( Override)。舉例來說，你遺傳(extends)了你爸爸的單眼皮，你可以請專業醫美改造(override)成雙眼皮，但是你還是有眼皮(特徵)。又或者另外一個例子，人類遺傳了靈長類的特徵，但是又改變了走路方式，變成「直立行走」。</p>

<p>在物件導向的世界裡，透過繼承，是實現重用性(reusability)的方式之一。讓已存在的功能或流程得以被重複使用，而不用重複開發。</p>

<h2>物件(Object)</h2>

<p>物件依照類別創造出來的具體東西。ex: 這一頂安全帽。</p>

<h2>類別與物件</h2>

<p>物件有獨特性，而類別有共通性。共同的特徵集中在類別定義上，而物件可以針對各自的狀況加以客製化。所以常常有人拿設計圖與實際的產品來比喻類別和物件間的關係。只要類別變更，創造出來的物件就也會跟著變。</p>

<h2>請問這些東西怎麼用？</h2>

<p><img class="center" src="http://wildwindjen.github.io/images/wildwind/object_oriented/usb.jpg" width="600" height="350" title="How use these devices" alt="How use these devices">
為什麼你知道這是 USB 隨身碟？因為你辨識得出來這些東西共同的地方，是 USB 共用的界面 &#8211; 統一的規格。</p>

<h2>介面(Interface)</h2>

<p>用來規範程式必須滿足的功能或者界面。簡單地說，就是用來定義規格的玩意兒。ex: USB 的開發規格書。透過規格的定義，可以不用理會實作的細節，用的人只知道產品有支援某規格，就可以依照該規格定義的方法使用
這個產品。</p>

<h2>封裝性(Encapsulation)</h2>

<p>封裝是一種特性，意思是隱藏細節。給使用者該知道的、該碰的，其餘他們不需要接觸的，一律隱藏(封)起來。</p>

<p>使用的人不用管這個東西如何製造(Process)、實作，只要知道怎麼用它(Input)，用了它會有什麼結果就好(Output)。我們只要知道將 USB 插上電腦就能讓我們存取 USB 裡的資料就好，至於各家的 USB 電路怎麼設計，我們不用知道。這樣隨身碟廠商想要更換內部電路設計(改變實作方式)，不用通知我們。我們之間沒有藕斷絲連，這就是所謂的降低耦合度(decoupling)。</p>

<p>與其說這是物件導向的特性，不如說這是設計應該有良好的特性。</p>

<p>介面主打的特性之一就是封裝，透過規格的制定，使用的人知道他該知道的 I/O，開發者也知道他該滿足哪些 I/O，這樣就好了。透過類別的存取控制，你也可以設計出封裝性。</p>

<h2>實作(implementation)</h2>

<p>宣告遵守某個規格，並且開發/實作出(implements)該規格規範的功能。ex: 每一個實際的 USB 裝置。都是 USB 規格的實作(成品)。</p>

<h2>多型(polymorphism)</h2>

<p>什麼叫多型？正所謂「多型不易，必自斃。」(哇咧供啥貨)。</p>

<p>這就是我下的定義：<code>以抽象之名，行具體之實。</code>一碼勝千言，這邊來看點程式碼，會更清楚。</p>

<figure class='code'><figcaption><span>People.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;吼～～&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Man.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Man</span> <span class="kd">extends</span> <span class="n">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;凍咧！&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Woman.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Woman</span> <span class="kd">extends</span> <span class="n">People</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">         * 喊叫</span>
</span><span class='line'><span class="cm">         * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">shout</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;嗯～&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>PeoplePolyDemo.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">PeoplePolyDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeople</span><span class="o">(</span><span class="n">People</span> <span class="n">people</span><span class="o">){</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shoutTogether</span><span class="o">(){</span>
</span><span class='line'>            <span class="n">Iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
</span><span class='line'>                <span class="n">People</span> <span class="n">people</span> <span class="o">=</span> <span class="o">(</span><span class="n">People</span><span class="o">)</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                <span class="n">people</span><span class="o">.</span><span class="na">shout</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PeoplePolyDemo</span> <span class="n">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PeoplePolyDemo</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">addPeople</span><span class="o">(</span><span class="k">new</span> <span class="n">Man</span><span class="o">());</span>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">addPeople</span><span class="o">(</span><span class="k">new</span> <span class="n">Woman</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">demo</span><span class="o">.</span><span class="na">shoutTogether</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行程式碼之後，你會看到 shoutTogether 雖然是使用 People 類別執行 shout 動作。可是卻是叫出該性別真正的叫聲。只要你是人，我就可以請你叫，至於發出什麼叫聲，就看你實際是男是女。站在使用者的角度來看，呼叫的都是同一個類別；站在結果來看，卻是各自的實際類別做動作。這就是我說的<code>以抽象之名，行具體之實</code>。Java 裡的抽象，不只是類別，使用抽象一樣可以達到多型。</p>

<h2>Why 物件導向</h2>

<ul>
<li>物件導向模擬了真實世界的特性，因為跟真實世界雷同，角色、職責分工，讓你容易理解、記憶。</li>
<li>透過物種演化、合成，可以實現既有程式碼的重用性(reusability)。</li>
<li>實踐封裝，讓各元件、角色彼此的合作，不再牽一髮而動全身。</li>
<li>&#8230;</li>
</ul>


<p>好吧，這樣太八股了，想要看上面這些優點，請自己去翻書吧。</p>

<p>為什麼要用物件導向？這個問題要問你自己，要看你的需求，你想要物件導向的特性解決你專案常發的甚麼問題？這就是你的需求。經驗告訴我，物件導向的特質會提高創建成本，還有人員教育門檻比較高，但是會降低專案長期維護成本。所以如果專案很小且急，而且不需要維護，我應該不會考慮使用物件導向。</p>

<p>各取所需。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Hibernate]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/29/first-hibernate/"/>
    <updated>2013-04-29T17:43:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/29/first-hibernate</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<pre>
此篇低原創性，非喜誤入。
</pre>


<p>因為某些原因，需要研究 Hibernate。所以參考 <a href="http://openhome.cc/Gossip/HibernateGossip/FirstHibernate.html" title="Hibernate Gossip: 第一個 Hibernate">Hibernate Gossip: 第一個 Hibernate</a>，做些實驗跟記錄。應該會記好長~好長的一陣子吧&#8230;</p>

<h2>下載 Hibernate 3.6.10</h2>

<ul>
<li>解壓縮</li>
<li>copy 出 hibernate3.jar</li>
<li>copy 出 lib/required/*.jar</li>
<li>copy 出 lib/jpa/*.jar ，話說這個是必要的，為什麼不是放在 required 裡啊？沒加進來出現下面的錯：</li>
</ul>


<pre>
java.lang.NoClassDefFoundError: javax/persistence/EntityListeners
</pre>


<h2>建立表格</h2>

<ul>
<li>注意 id 要 auto_increment，不然晚點會報無法寫入的錯： <code>Field 'id' doesn't have a default value</code></li>
</ul>


<pre>
    Exception in thread "main" org.hibernate.exception.GenericJDBCException: could not insert: [hbm.User]
        at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:140)
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:128)
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)
        at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:63)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2346)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2853)
        at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:71)
        at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:273)
        at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:320)
        at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:203)
        at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:129)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:210)
        at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:56)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:195)
        at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:50)
        at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93)
        at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:713)
        at org.hibernate.impl.SessionImpl.save(SessionImpl.java:701)
        at org.hibernate.impl.SessionImpl.save(SessionImpl.java:697)
        at hbm.HibernateDemo.main(HibernateDemo.java:17)
    Caused by: java.sql.SQLException: Field 'id' doesn't have a default value
        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073)
        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3609)
        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3541)
        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2002)
        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2163)
        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2624)
        at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2127)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2427)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2345)
        at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2330)
        at org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate.executeAndExtract(IdentityGenerator.java:93)
        at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:56)
        ... 16 more
</pre>


<h2>開發</h2>

<ul>
<li>新增 Java Project</li>
<li>把剛剛 copy 出了 jar 加進 Build Path</li>
<li>新增的兩個 xml 在 src/ 下。不然會報找不到這個錯： <code>/hibernate.cfg.xml not found</code></li>
</ul>


<pre>
    Exception in thread "main" java.lang.ExceptionInInitializerError
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:13)
        at hbm.HibernateDemo.main(HibernateDemo.java:13)
    Caused by: org.hibernate.HibernateException: /hibernate.cfg.xml not found
        at org.hibernate.util.ConfigHelper.getResourceAsStream(ConfigHelper.java:170)
        at org.hibernate.cfg.Configuration.getConfigurationInputStream(Configuration.java:2176)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2157)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2137)
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:10)
        ... 1 more
</pre>


<p>或者 <code>User.hbm.xml not found</code></p>

<pre>
    Exception in thread "main" java.lang.ExceptionInInitializerError
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:13)
        at hbm.HibernateDemo.main(HibernateDemo.java:13)
    Caused by: org.hibernate.MappingNotFoundException: resource: User.hbm.xml not found
        at org.hibernate.cfg.Configuration.addResource(Configuration.java:799)
        at org.hibernate.cfg.Configuration.parseMappingElement(Configuration.java:2344)
        at org.hibernate.cfg.Configuration.parseSessionFactory(Configuration.java:2310)
        at org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2290)
        at org.hibernate.cfg.Configuration.doConfigure(Configuration.java:2243)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2158)
        at org.hibernate.cfg.Configuration.configure(Configuration.java:2137)
        at hbm.HibernateUtil.<clinit>(HibernateUtil.java:10)
        ... 1 more
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress by Self]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/28/customize-octopress-by-self/"/>
    <updated>2013-04-28T11:06:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/28/customize-octopress-by-self</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>士為悅己者死。</p></blockquote>

<p>有些東西不是單純靠 config 就能弄出來的。偏偏自己又想要有這些東西。所以搞死自己也是算活該吧。</p>

<h2>留言討論 - 綁 Google 的留言</h2>

<p>因為我跟 Disqus 沒那麼熟。雖然 Google Plus 好像也沒熟去哪裡，可是我至少有帳號。一開始我是參考這一篇的: <a href="http://blog.justin.kelly.org.au/google-plus-octopress/" title="Google Plus Comments Link for Octopress">Google Plus Comments Link for Octopress</a>。但這個作法只是出現連結，而且每篇產生後還得自己 +1。所以最後我沒採用。以下是我的經驗整理：</p>

<ul>
<li>首先要設定 _config.xml 裡的 googleplus_user，這裡面的是 google plus id，純數字。這一關我有被騙到，一開始自以為聰明直接打 Google 帳號。不知道怎麼找自己 id 的人可以看 <a href="http://ansonalex.com/google-plus/how-do-i-find-my-google-plus-user-id-google/" title="How Do I Find My Google Plus User ID?">How Do I Find My Google Plus User ID?</a> 。</li>
<li>因為會用到 Google API Key，所以先去 <a href="https://code.google.com/apis/console/" title="API Console - Google Code">API Console - Google Code</a>。然後參考 <a href="http://www.designchemical.com/blog/index.php/faq/create-your-own-google-api-key/" title="Create Your Own Google API Key">Create Your Own Google API Key</a> ，開啟你的 Google+ API 服務，讓他變成 ON 的狀態。</li>
<li>切到 API Access，創建新的 Key(Create New Browser Key)，記住新的 key 值。</li>
<li>接著就照著 <a href="http://blog.justin.kelly.org.au/google-plus-octopress/" title="Google Plus Comments Link for Octopress">Google Plus Comments Link for Octopress</a> 說的，修改 <code>source/_includes/custom/after_footer.html</code> 和 <code>source/_includes/custom/head.html</code> 兩個檔案。其中的 <code>{YOUR_GOOGLE_API_KEY}</code> 記得換成剛剛的 Google API Key。</li>
<li>然後有個規則要特別注意的是，每發一篇新的文章，要自己先 +1 一下，而且得設定成<em>公開</em>，不然不會出現 comments 區塊。我被這一關卡超久的，因為我預設都是限定開放。後來發現 API 回傳的資料都是空，可是登入 Google Plus 又查得到，稍微發揮了點推理能力才解決。</li>
<li>使用 preview 是看不到結果的，得 deploy 才行。除非&#8230;，跟我一樣，把 <code>after_footer.html</code> 做點修改：</li>
</ul>


<pre>
//$post_link = encodeURI(jQuery(location).attr('href'));
$post_link = window.location.pathname;
</pre>


<h2>留言討論 - 綁 Google 的留言(終極版)</h2>

<p>是的，這是最終我採取的做法。留言直接在下方出現，不用點連結，也不用每篇寫完後要自己先 +1。這個做法是踹上面那個解法過程中，發現的可能做法，然後自己在 octopress 上試出來的。請先看一下 <a href="http://dashburst.com/how-to-add-google-comments-to-any-webpage-or-blog-unofficially/" title="How to Add Google+ Comments to Any Webpage or Blog">How to Add Google+ Comments to Any Webpage or Blog</a>。以下是我自己的做法：</p>

<ul>
<li>一樣要設定 _config.xml 裡的 googleplus_user 。</li>
<li>修改 <code>source/_layouts/post.html</code> ，在 Disqus 後面補上一段程式碼：</li>
</ul>


<figure class='code'><figcaption><span>google plus comments </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.disqus_short_name and page.comments == true %}
</span><span class='line'>    &lt;section>
</span><span class='line'>      &lt;h1>Comments&lt;/h1>
</span><span class='line'>      &lt;div id="disqus_thread" aria-live="polite">{% include post/disqus_thread.html %}&lt;/div>
</span><span class='line'>    &lt;/section>
</span><span class='line'>  {% endif %}
</span><span class='line'>
</span><span class='line'>  &lt;!-- Google Comments, by wildwindjen -->
</span><span class='line'>  {% if site.googleplus_comments == true %}
</span><span class='line'>    &lt;section>
</span><span class='line'>      &lt;script src="https://apis.google.com/js/plusone.js">
</span><span class='line'>      &lt;/script>
</span><span class='line'>      &lt;div class="g-comments"
</span><span class='line'>          data-href=window.location
</span><span class='line'>          data-width="789"
</span><span class='line'>          data-first_party_property="BLOGGER"
</span><span class='line'>          data-view_type="FILTERED_POSTMOD">
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/section>
</span><span class='line'>  {% endif %}
</span><span class='line'>  &lt;!-- Google Comments end --></span></code></pre></td></tr></table></div></figure>


<ul>
<li>接著在 <code>_config.xml</code> 中新增一個 <code>googleplus_comments</code> 參數。如果不想加這個參數，可以把上一段的 if 判斷拿掉，這樣就會一直都出現。維持橡皮人的彈性只是職業病而已。</li>
</ul>


<pre>
# Facebook Like
facebook_like: false

# google comments, by wildwindjen
googleplus_comments: true
</pre>


<ul>
<li>如果你留言送出時，遇到了 <code>Unsafe JavaScript attempt to access frame ...</code> 的訊息，可以改成跟我一樣的作法。我的作法可以讓本機的 <code>preview</code> 也正常。這個問題讓我弄了大半天。原因只是 URL 有誤。可是訊息提示很容易誤導。我最後是在<a href="http://browsingthenet.blogspot.tw/2013/04/google-plus-comments-on-any-website.html" title="這邊">唯一的線索</a>看到某篇回覆參透的。</li>
</ul>


<pre>
    data-href = "http://wildwindjen.github.io" + window.location.pathname
</pre>


<p>這樣就好了，步驟比上個做法簡短，結果更漂亮。只是得改 code 而已。話說 octopress 有提供客製化 post 的機制嗎？實在不是很喜歡這樣直接改 source code。 我喜歡客製化部分跟原生部分切開來。</p>

<h2>Syntax Highlight</h2>

<p>想要使用程式碼美化功能，其實內建就有囉。參考<a href="http://octopress.org/" title="官網">官網</a>下方的 Plugins FTW 。有 <a href="http://octopress.org/docs/plugins/codeblock" title="Cold Block">Cold Block</a> 和 <a href="http://octopress.org/docs/plugins/include-code" title="Include Code">Include Code</a> 兩種。</p>

<h3>Cold Block</h3>

<p>將你的程式碼內嵌在 blog 裡。</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% codeblock [標題] [lang:language] [url] [link text] %}
</span><span class='line'>  程式碼
</span><span class='line'>{% endcodeblock %}</span></code></pre></td></tr></table></div></figure>


<h3>Include Code</h3>

<p>挑選程式碼檔案出來呈現。預設情況下，程式碼檔案要放在 <code>source/downloads/code</code> 裡面。如果你想要修改預設路徑，可以透過 _config.xml 的 <code>code_dir</code>。所以 <code>path/to/file</code> 是相對於 source/downloads/code 的路徑。</p>

<figure class='code'><figcaption><span>Include Code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code [標題] [lang:language] path/to/file %}</span></code></pre></td></tr></table></div></figure>


<h3>安裝 Python</h3>

<p>為了使用 Plugin 功能，需要使用 Python。如果你使用了上述兩個語法，但是在 rake generate 的時候，報了跟我一樣找不到 python 目錄的錯。請你安裝 Python 2.7.x。我是安裝 2.7.4。然後新增系統變數即可。</p>

<h2>外部連結另開</h2>

<p>Markdown 語法產生出來的連結，沒有支援另開頁面，所以只好自己處理。作法很多，我自己的作法是在 <code>/source/_includes/custom/after_footer.html</code> 動手腳。打開檔案，在最下面加上：</p>

<figure class='code'><figcaption><span>Cold Block </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript">
</span><span class='line'>  $('a[href^="http://"]').attr("target", "_blank");
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Octopress by Configuration]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/27/customize-octopress-by-config/"/>
    <updated>2013-04-27T18:49:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/27/customize-octopress-by-config</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>女為悅己者容。</p></blockquote>

<p>這一部份是記錄研究如何客製化成我想要的樣子。先搞定功能的部分。</p>

<p>外表部分，其實早在安裝 octopress 之前看過一輪網路上的參考，就知道預設版型都一樣，不像 wordpress，還有得挑。所以想要有點個人特色，就得靠自己樣樣來。不過看了官方文件，發現常用的東西要客製化也算簡單，真的深入一點可能就得要會 Ruby 打造術了吧。我不會 Ruby，暫時也還沒有計畫去研究，所以我想要先從內建的機制下手: _config.xml。再加上一些些基本 css 和圖片的調整，應該可以有個不太一樣的東西。</p>

<p>功能部分，看了 _config.xml 的設定項目，發現還內建了好幾個 plugin。最開心的是有 syntax highlighting 的部分。這真的是想要做程式相關分享的一大福音啊。</p>

<h2>日期格式</h2>

<p>我對日期格式有一種莫名的偏執。</p>

<ul>
<li>參考 <a href="http://www.ruby-doc.org/core-1.9.2/Time.html#method-i-strftime" title="Ruby Doc datetime format">Ruby Doc</a></li>
<li>打開 _config.xml 修改成:</li>
</ul>


<pre>
date_format: "%Y-%m-%d %H:%M"
</pre>


<h2>留言討論 - 預設的 Disqus</h2>

<p>內建的討論串機制是使用 disqus，要設定真的超級簡單的。假設是沒有 Disqus 帳號的人:</p>

<ul>
<li>註冊帳號。</li>
<li>去註冊信箱收信，並且啟動帳號。</li>
<li>登入 Disqus。點選「Dashboard」功能。</li>
<li>登入首頁左上方有個 「register a site」的連結。</li>
<li>填入 Site URL 和 Site Name 就會自動產生 short name 資訊。點選 continue 之後，隨便選就好，只是要產生你要放的 code。可是我們用不到。</li>
<li>把 short name 填入 _config.xml 裡:</li>
</ul>


<pre>
disqus_short_name: short name
disqus_show_comment_count: true
</pre>


<ul>
<li>是的，這樣就行了，只要執行 deploy 就可以看到下面有 disqus comments 囉。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Octopress Back]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/26/get-back-octopress/"/>
    <updated>2013-04-26T23:58:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/26/get-back-octopress</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>天行健，君子以自戕不息。</p>

<p>有產出，就應該有回收，維持循環的地獄。</p></blockquote>

<p>都放上去 GitHub 了，總得演練怎麼拿回來。下面補充上一篇沒有提到的備份(octopress 官網建議的方式)，並且示範怎麼把備份的東西重新拿回來。</p>

<h2>備份</h2>

<ul>
<li>stage octopress 裡面的檔案</li>
</ul>


<pre>
git add .
</pre>


<ul>
<li>commit 檔案到本地檔案庫，並且填寫描述訊息。</li>
</ul>


<pre>
git commit -m "備份 source"
</pre>


<ul>
<li>從本地檔案庫推到遠端檔案庫，並且指名放在 source branch 裡面。</li>
</ul>


<pre>
git push origin source
</pre>


<h2>取回</h2>

<ul>
<li>假設現在換了一台電腦(先把原本的 octopress 更名)</li>
<li>先從 source branch 複製一份回來，放到 octopress 目錄裡。</li>
</ul>


<pre>
git clone -b source git@github.com:wildwindjen/wildwindjen.github.com.git octopress
</pre>


<ul>
<li>切換到 octopress 目錄裡面</li>
</ul>


<pre>
cd octopress
</pre>


<ul>
<li>從 master branch 複製一份回來，放到 _deploy 目錄裡。(之前 rake deploy 就是把資料推到 master 裡。)</li>
</ul>


<pre>
git clone git@github.com:wildwindjen/wildwindjen.github.com.git _deploy 
</pre>


<ul>
<li>重新安裝必要的環境及設定</li>
</ul>


<pre>
gem install bundler
bundle install
rake install
</pre>


<ul>
<li>重設編碼 (如果跟我一樣是在 windows 上面測試的話。)</li>
</ul>


<pre>
set LC_ALL=zh_TW.UTF-8
set LANG=zh_TW.UTF-8
</pre>


<h2>取回(在不是很自由的環境下)</h2>

<ul>
<li>安裝 Git</li>
<li>安裝 GitHubSetup (解決 ssh 設定，之後上傳的帳密請使用 github 登入用的帳密)</li>
<li>安裝 Ruby</li>
<li>安裝 DevKit</li>
<li>安裝 Python</li>
<li>先不走 ssl 機制</li>
</ul>


<pre>
git config --global http.sslVerify false
</pre>


<ul>
<li>取回 source</li>
</ul>


<pre>
git clone -b source  https://github.com/wildwindjen/wildwindjen.github.com.git octopress
</pre>


<ul>
<li>切換到 octopress 目錄裡面</li>
</ul>


<pre>
cd octopress
</pre>


<ul>
<li>重新安裝必要的環境及設定</li>
</ul>


<pre>
gem install bundler --source http://rubygems.org
bundle install
rake install
</pre>


<ul>
<li>重設編碼 (如果跟我一樣是在 windows 上面測試的話。)</li>
</ul>


<pre>
set LC_ALL=zh_TW.UTF-8
set LANG=zh_TW.UTF-8
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Octopress at GitHub]]></title>
    <link href="http://wildwindjen.github.io/blog/2013/04/25/first-octopress-at-github/"/>
    <updated>2013-04-25T12:30:00+08:00</updated>
    <id>http://wildwindjen.github.io/blog/2013/04/25/first-octopress-at-github</id>
    <content type="html"><![CDATA[<h2>總結</h2>

<blockquote><p>不經一試，不長一智。</p>

<p>結果是甜美的，過程是母親的。</p></blockquote>

<p>也不知道在失心瘋什麼，沒碰過 Git，也沒碰過 Ruby，居然學人家搞 octopress。不管怎樣，就這樣一路跌跌撞撞，不懂什麼就補齊什麼。也拼拼湊湊出來一些東西。就順便把經驗整理一下。</p>

<p>在有 proxy 的環境下安裝(ex: 公司)，跟 github 有相關的操作，統一改用 HTTPS 會比較沒問題。在家的話，基本上隨便 google 參考都可以裝成功。因為之前找到的資料幾乎都是 SSH ，反而因為比較少 HTTPS 的方式。以下就直接拿 HTTPS 的建立方式作分享，因為這個方式在家也適用。</p>

<h2>我的環境</h2>

<ul>
<li>OS: Window XP</li>
<li>Git: Git-1.8.1.2-preview20130201</li>
<li>Ruby: Ruby 1.93</li>
</ul>


<h2>GitHub</h2>

<ul>
<li>去 <a href="http://github.com" title="GitHub">GitHub</a></li>
<li>沒帳號就申請帳號</li>
<li>創建帳號後，登入，然後建立一個 Repository，名字叫做 your_github_id.github.com。 (例如我的就是 wildwindjen.github.com)</li>
</ul>


<h2>安裝 Git</h2>

<ul>
<li>下載 <a href="http://git-scm.com/" title="Git">Git</a></li>
<li>直接執行安裝檔，中間除了我想讓 Path 找得到 git ，有改過這頁的設定(Run Git from the Windows Command Prompt)，其他步驟都是預設值。</li>
</ul>


<h2>設定 GitHub SSH Key (這一段是想走 SSH 的人要做的)</h2>

<ul>
<li>參考 <a href="https://help.github.com/articles/generating-ssh-keys" title="generating-ssh-keys">generating-ssh-keys</a></li>
<li>打開 Git Bash</li>
</ul>


<pre>
    cd ~/.ssh
</pre>


<p>如果沒有的話就自己建立一個 .ssh
+ 產生 ssh key</p>

<pre>
    ssh-keygen -t rsa -C "your_email@example.com"
</pre>


<ul>
<li>輸入你想輸入的密碼 passphrase (有寫比較安全，但也可以留空)</li>
<li>複製產生出來的 key，以下的語法我在 window 7 可以執行，但是 XP 不行。(所以直接去 C:\Documents and Settings\wildwindjen.ssh\id_rsa.pub 用編輯器開檔，全選、複製就可以了。)</li>
</ul>


<pre>
    clip < ~/.ssh/id_rsa.pub
</pre>


<ul>
<li>登入 GitHub > Account Setting > SSH Keys，點選 Add SSH Keys 按鈕，名字亂取，把剛剛複製的貼上就好。</li>
</ul>


<h2>安裝 Ruby</h2>

<ul>
<li>參考這篇 <a href="http://itspg.github.io/blog/2012/02/29/octopress-on-windows-tutorial/" title="在windows上安裝octopress 新手教學 / 初學者指南">在windows上安裝octopress 新手教學 / 初學者指南</a></li>
<li>下載 Ruby 和 DevKit</li>
<li>安裝 Ruby ，一路上都是預設值。</li>
<li>新增一個 devkit 目錄，解壓縮 DevKit 到這個目錄 devkit 裡面</li>
<li>打開命令提示字元，切換目錄到 devkit，執行以下目錄，安裝開發用的工具：</li>
</ul>


<pre>
    ruby dk.rb init
    ruby dk.rb install
</pre>


<ul>
<li>更新 gem。</li>
</ul>


<pre>
    gem update --system
</pre>


<h2>安裝 octopress</h2>

<ul>
<li>切換到你想要放 octopress 的目錄</li>
<li>執行以下命令，注意到我這邊是使用 https。</li>
</ul>


<pre>
    git clone https://github.com/imathis/octopress.git octopress
    cd octopress
    gem install bundler
    bundle install
    rake install
</pre>


<h2>設定 octopress</h2>

<ul>
<li>先設定 octopress 要放上去的 Repository</li>
</ul>


<pre>
    rake setup_github_pages
</pre>


<ul>
<li>接著會問你要對應的 github 路徑是哪一個，輸入 your_github_id.github.com 路徑。例如我的是長這樣：</li>
</ul>


<pre>
    git@github.com:wildwindjen/wildwindjen.github.io
</pre>


<ul>
<li>接著就可以打開 octopress/_config.xml 作其他的個人化設定。</li>
</ul>


<h2>撰寫 octopress</h2>

<ul>
<li>先新增一篇文章：</li>
</ul>


<pre>
    rake new_post["文章名稱"]
</pre>


<ul>
<li>去 octopress/source/_posts 就可以看到副檔名 .markdown 的文章。</li>
<li>使用慣用的編輯器打開，使用 markdown 語法開始寫文章吧。</li>
<li>完成的話，要執行以下命令，讓 markdown 檔案轉換成 html：</li>
</ul>


<pre>
    rake generate
</pre>


<ul>
<li>想要在本機預覽:</li>
</ul>


<pre>
    rake preview
</pre>


<ul>
<li>打開瀏覽器，輸入 [http://127.0.0.1:4000/]，就可以預覽結果。(要結束預覽回到命令模式請 ctrl+c)</li>
<li>如果你跟我一樣，有遇到亂碼問題(YAML Exception reading xxx.markdown: invalid byte sequence in CP950 &#8230;)，請：

<ul>
<li>確認檔案編碼是不是使用 UTF-8 存檔。</li>
<li>輸入以下指令
<pre>
  set LC_ALL=zh_TW.UTF-8
  set LANG=zh_TW.UTF-8
</pre></li>
<li>再重新 rake generate 一次</li>
</ul>
</li>
</ul>


<h2>發佈 octopress</h2>

<ul>
<li>預覽都沒問題，就是該放到 github 上囉。直接發佈看看：</li>
</ul>


<pre>
    rake deploy
</pre>


<ul>
<li>假設你跟我一樣，因為某些緣故不能使用 SSH。先確認一下你的 origin，在 octopress/_deploy 目錄下輸入：</li>
</ul>


<pre>
    git remote -v
</pre>


<ul>
<li>應該是會看到以下格式</li>
</ul>


<pre>
    origin  git@github.com:wildwindjen/wildwindjen.github.io (fetch)
    origin  git@github.com:wildwindjen/wildwindjen.github.io (push)
</pre>


<ul>
<li>請輸入以下指令作修改，改走 HTTPS 的方式 deploy：</li>
</ul>


<pre>
git remote set-url origin https://github.com/wildwindjen/wildwindjen.github.com.git
</pre>


<ul>
<li>重新 rake deploy 就好囉。</li>
<li>因為之後會上傳 source ，所以我也在 octopress/ 下確認一次 origin，這邊也是得改走 HTTPS。</li>
</ul>


<h2>未驗證</h2>

<p>寫文章至此，我猜想在做「rake setup_github_pages」步驟時，直接填入 https 格式，應該就沒有後面的麻煩了。之後有時間再踹踹看。</p>

<h2>其他經驗</h2>

<h3>SSH 的 Debug 方式</h3>

<p>過程中遇到一堆 SSH 的問題，直到遇見這個語法，才解除了我盲目的人生。</p>

<pre>
    ssh -vvv git@github.com
</pre>


<h3>SSH 的客製化設定檔</h3>

<p>.ssh 目錄下面可以自己新增一個檔名 config 來做一些客製化的動作，例如：假設有需要把預設的 port 22 改換成 443，可以透過這一招。可惜這次沒機會表現。</p>

<pre>
    Host github.com
    User wildwind.jen@gmail.com
    Hostname ssh.github.com
    Port 443
</pre>

]]></content>
  </entry>
  
</feed>
