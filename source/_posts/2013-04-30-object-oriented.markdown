---
layout: post
title: "物件導向"
date: 2013-04-30 14:36
comments: true
categories: 
- Object-Oriented
- Java
---
## 總結
<pre>
「只重其義，不重其招，你忘記所有招式，就練成了！ 」「你記住了沒？」
</pre>

這篇是因為我必須要在部門裡面作教育訓練，對於物件導向要怎麼上手，整理出來的心得。

## 必須先知道的事
+ 物件導向，是觀念，是思維，是方法論。不是技術。


## 跳躍門檻
從開始接觸物件導向到現在，一路上跌跌撞撞，總算有點理解物件導向設計與開發的輪廓。發現學習的門檻不是封裝、繼承、多型的概念，而是在於要先懂得區分「抽象的概念」與「具體的成品」。這兩個分得開來講，後面就好說了。

拿安全帽來舉例，「騎車要戴安全帽」和「你要戴這一頂安全帽」，這兩個句子裡安全帽，意義上是不太一樣的。「騎車要戴安全帽」的安全帽是一種統稱，泛指安全帽這種類，所以是一種抽象的概念。而「你要戴這一頂安全帽」的安全帽，則是明確的指出一個實體，是一個具體的成品。

區分得出來這兩種安全帽，我們就開始進入物件導向的世界吧。


## 物件導向觀念裡的抽象和具體
在觀念裡，抽象的我們叫類別(Class)，依照抽象的概念打造出來的具體成品，我們叫實例(Instance)。


## Java 裡的抽象和具體
在 Java 裡，我們使用類別(Class)或者介面(Interface)來定義抽象的概念，而依照類別產生出來的具體成品我們叫物件(Object)，依照介面打造而成的具體成品我們稱為實作(Implementation)。


## 類別(Class)
類別就是這個世界所有組成元素的分類。(而程式的世界是什麼，就是要開發的系統。)就像是生物學裡的[生物分類法](https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%88%86%E9%A1%9E%E6%B3%95 "生物分類法")，分類有明確的依據跟標準。類別，代表著分類標準的定義，另一方面來說，也就是物件共同的特徵。ex: 安全帽的共同特徵可能是有能保護頭的帽子、有合格的標章、面罩。

### 繼承(Inheritance)
物件導向觀念裡的類別跟真實世界的物種一樣，有遺傳的概念。在物件導向世界裡叫做繼承。不過跟這篇[繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)](http://milikao.pixnet.net/blog/post/543716-%E7%B9%BC%E6%89%BF%E6%98%AF%E7%88%B6%E5%AD%90%E9%97%9C%E4%BF%82%EF%BC%9F%E6%89%8D%E6%80%AA%EF%BC%81-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%88%9D%E5%AD%B8%E8%80%85%E6%87%89 "繼承是父子關係？才怪！ 物件導向初學者應該要知道的事情(四)")作者一樣，我覺得遺傳的這個詞比較好。因為繼承是人為的，可以放棄繼承。但遺傳是天生的，後來衍生的種類是沒辦法放棄的。而物件導向的繼承你是不能放棄繼承的，一旦父類別有這個特徵，子類別就必須有。這種特性比較像是遺傳。

但是在這裡我們還是隨波逐流，使用繼承一詞。

子類別繼承父類別，會有相同的特徵(feature)。子類別雖然不能放棄繼承，但是可以改造這個特徵。程式的世界叫做覆寫( Override)。舉例來說，你遺傳(extends)了你爸爸的單眼皮，你可以請專業醫美改造(override)成雙眼皮，但是你還是有眼皮(特徵)。

在物件導向的世界裡，透過繼承，是實現重用性(reusability)的方式之一。讓已存在的功能或流程得以被重複使用，而不用重複開發。


## 物件(Object)
物件依照類別創造出來的具體東西。ex: 這一頂安全帽。


## 類別與物件
物件有獨特性，而類別有共通性。共同的特徵集中在類別定義上，而物件可以針對各自的狀況加以客製化。所以常常有人拿設計圖與實際的產品來比喻類別和物件間的關係。只要類別變更，創造出來的物件就也會跟著變。


## 請問這是什麼
為什麼你知道這是隨身碟(USB)？


## 介面(Interface)
用來規範產品必須滿足的功能或者界面。簡單地說，就是用來定義規格的玩意兒。ex: USB 的開發規格書。

### 封裝(Encapsulation)
使用的人不用管這個東西如何製造(Process)，只要知道怎麼用它(Input)，用了它會有什麼結果就好(Output)。我們只要知道將 USB 插上電腦就能讓我們存取 USB 裡的資料就好，至於各家的 USB 電路怎麼設計，我們不用管。碰你該碰的部份，就是封裝想要達成的目的。這樣我電路想要更換設計(改變實作方式)，不用通知你。我們之間沒有藕斷絲連，這就是所謂的降低耦合度(decoupling)。


## 實作(implementation)
宣告遵守某個規格，並且開發/實作出(implements)該規格規範的功能。ex: 每一個實際的 USB 。都是 USB 規格的實作(品)。


## 多型(polymorphism)
正所謂「多型不義，必自斃。」(哇咧供啥貨)。

什麼叫多型？這就是我下的定義：
<pre>
以抽象之名，行具體之實。
</pre>

一碼勝千言，這邊要看點程式碼，會更清楚。